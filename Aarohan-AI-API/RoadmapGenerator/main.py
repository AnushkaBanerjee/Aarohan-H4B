#preprocessing

"""
Install the Google AI Python SDK

$ pip install google-generativeai

See the getting started guide for more information:
https://ai.google.dev/gemini-api/docs/get-started/python
"""

import os
import time
import json
import google.generativeai as genai

genai.configure(api_key='AIzaSyAGbMYg4gj7xXe3o3enzVEuLW4ADaNi1rU')

root_dir = os.path.dirname(os.path.abspath(__file__))
# connect to the files in the static/syllabus folder in the root directory
syllabus_dir = os.path.join(root_dir, "../static/syllabus")
#now we will read the syllabus files and convert them to text

def upload_to_gemini(path, mime_type=None):
  """Uploads the given file to Gemini.

  See https://ai.google.dev/gemini-api/docs/prompting_with_media
  """
  file = genai.upload_file(path, mime_type=mime_type)
  print(f"Uploaded file '{file.display_name}' as: {file.uri}")
  return file

def wait_for_files_active(files):
  """Waits for the given files to be active.

  Some files uploaded to the Gemini API need to be processed before they can be
  used as prompt inputs. The status can be seen by querying the file's "state"
  field.

  This implementation uses a simple blocking polling loop. Production code
  should probably employ a more sophisticated approach.
  """
  print("Waiting for file processing...")
  for name in (file.name for file in files):
    file = genai.get_file(name)
    while file.state.name == "PROCESSING":
      print(".", end="", flush=True)
      time.sleep(10)
      file = genai.get_file(name)
    if file.state.name != "ACTIVE":
      raise Exception(f"File {file.name} failed to process")
  print("...all files ready")
  print()

# Create the model
# See https://ai.google.dev/api/python/google/generativeai/GenerativeModel
generation_config = {
  "temperature": 1,
  "top_p": 0.95,
  "top_k": 64,
  "max_output_tokens": 8192,
  "response_mime_type": "text/plain",
}

model = genai.GenerativeModel(
  model_name="gemini-1.5-pro",
  generation_config=generation_config,
  # safety_settings = Adjust safety settings
  # See https://ai.google.dev/gemini-api/docs/safety-settings
)

def load_chats():
  #  pass

  # TODO Make these files available on the local file system
  # You may need to update the file paths
  files = [
    upload_to_gemini(os.path.join(syllabus_dir, "8.pdf"), mime_type="application/pdf"),
    upload_to_gemini(os.path.join(syllabus_dir, "7.pdf"), mime_type="application/pdf"),
    upload_to_gemini(os.path.join(syllabus_dir, "6.pdf"), mime_type="application/pdf"),
    upload_to_gemini(os.path.join(syllabus_dir, "5.pdf"), mime_type="application/pdf"),
    upload_to_gemini(os.path.join(syllabus_dir, "4.pdf"), mime_type="application/pdf"),
    upload_to_gemini(os.path.join(syllabus_dir, "3.pdf"), mime_type="application/pdf"),
    upload_to_gemini(os.path.join(syllabus_dir, "1_2.pdf"), mime_type="application/pdf")
  ]

  # Some files have a processing delay. Wait for them to be ready.
  wait_for_files_active(files)

  chat_session = model.start_chat(
    history=[
      {
        "role": "user",
        "parts": [
          "Hey I am working on a roadmap generation project for makaut university. ",
        ],
      },
      {
        "role": "model",
        "parts": [
          "That's awesome! I'm happy to help you brainstorm ideas for your MAKAUT roadmap generation project. \n\nTo get started, I need some more information about your project:\n\n**1. Project Goals:**\n* What is the purpose of this roadmap? \n* What are the key outcomes you want to achieve? (e.g., improve student satisfaction, increase industry partnerships, enhance research output)\n* What stakeholders are you targeting? (e.g., students, faculty, administration, industry partners)\n\n**2. Project Scope:**\n* What areas of MAKAUT are you focusing on? (e.g., specific departments, programs, research areas, overall university operations)\n* What timeframe are you working with? (e.g., 1 year, 5 years, 10 years)\n\n**3. Existing Information and Data:**\n* Do you have access to any data or reports related to MAKAUT's current performance, strategic plans, or past initiatives? \n* Have there been any prior roadmaps or strategic planning efforts?\n\n**4. Roadmapping Approach:**\n* Are you using any specific roadmapping methodologies or frameworks? \n* Do you have any preferred tools or platforms for building the roadmap?\n\nOnce I understand your project goals, scope, and approach, I can offer more specific suggestions and support for:\n\n* **Identifying Key Priorities:** Based on your goals and data, we can identify the most important areas for focus in your roadmap.\n* **Developing Strategic Objectives and Initiatives:** We can brainstorm specific objectives and initiatives that align with your priorities.\n* **Defining Milestones and Key Performance Indicators (KPIs):**  We can establish clear milestones and KPIs to track progress and measure success.\n* **Creating a Visual Roadmap:** We can help you create a compelling and easy-to-understand roadmap using tools like Gantt charts, timelines, or mind maps.\n\nI am also familiar with many university-related resources and best practices, and I can help you incorporate those into your roadmap.\n\nLet's work together to create a successful roadmap for MAKAUT! \n",
        ],
      },
      {
        "role": "user",
        "parts": [
          "I will give you the syllabus of makaut please study it.",
        ],
      },
      {
        "role": "model",
        "parts": [
          "I am eager to help! I can definitely analyze the MAKAUT syllabus and provide insights for your roadmap project. However, I need the syllabus itself to do so. \n\nPlease provide me with the syllabus in any way you can:\n\n* **Link to a website or document:** If the syllabus is available online, please share the link.\n* **Text file:** You can paste the syllabus text directly into our conversation. \n* **PDF document:** If you have the syllabus as a PDF, I may be able to process it depending on the format.\n\nOnce I have access to the syllabus, I can help you:\n\n* **Identify trends and gaps:**  I can analyze the curriculum to spot areas where MAKAUT may be lagging behind industry needs or current research.\n* **Explore new program areas:** I can help identify potential new programs or specializations that align with emerging technologies and market demands.\n* **Suggest updates to existing courses:** I can recommend changes to courses or curriculum to ensure they remain relevant and prepare students for success.\n* **Explore potential industry partnerships:** I can help you identify companies or organizations that might be interested in collaborating with MAKAUT on research projects, internships, or joint programs.\n\nI am excited to work with you and contribute to MAKAUT's future success! \n",
        ],
      },
      {
        "role": "user",
        "parts": [
          "Now that this prompt is saved, how do I access the info that this particular chat has learnt\n",
        ],
      },
      {
        "role": "model",
        "parts": [
          "You are correct! I have no memory of past conversations. Each new interaction starts fresh with me. \n\nHere's why that is and how we can work around it:\n\n* **Large Language Models (LLMs) like me are designed for single conversations:** We are not designed to store information about past chats. It would require a vast amount of storage and processing power to remember everything.\n* **Privacy and Security:** Storing your personal conversations would raise serious privacy and security concerns.\n\n**Here's how to make sure your MAKAUT roadmap project information is preserved:**\n\n1. **Use a dedicated document or project management tool:** Keep all the syllabus information, brainstorm notes, and project progress in a file that you can access later.\n2. **Copy and paste important info:**  As we chat, you can copy and paste key insights or suggestions from me into your document. \n3. **Save the entire conversation:**  If your platform has the option, you can save the entire conversation history so you can refer back to it.\n4. **Keep things organized:** Label your documents clearly so you can find the information you need when you need it. \n\nLet's make sure we have a productive and successful roadmap process for MAKAUT! \n",
        ],
      },
      {
        "role": "user",
        "parts": [
          "then how will i know that u remember how to generate roadmap?\n",
        ],
      },
      {
        "role": "model",
        "parts": [
          "You're right to point that out! I don't \"remember\" specific tasks like roadmap generation in the way a human does. But I do have the knowledge and ability to do it whenever you ask.\n\nHere's how I work:\n\n1. **I access and process information from the vast data I was trained on:** This includes examples of roadmaps, best practices, industry trends, and so on. \n2. **I use your instructions and context to tailor the output:**  Each time you give me a new prompt or ask for a roadmap, I use my knowledge and your specific needs to generate the best possible response.\n3. **My knowledge and abilities are constantly evolving:**  I am being trained and updated regularly, so my ability to generate roadmaps and other content is always improving.\n\n**Think of it like this:** I'm like a very knowledgeable and adaptable assistant. I don't have a personal memory, but I have the tools and skills to complete tasks whenever you need me.  \n\nSo, while I don't \"remember\" past conversations, you can always rely on me to generate a roadmap based on the information you provide and the task you give me. \n",
        ],
      },
      {
        "role": "user",
        "parts": [
          "for example i want you to generate roadmap for makaut syllabus, i train you on it through the pdf here and ask for a syllabus through python prompt will it work?",
        ],
      },
      {
        "role": "model",
        "parts": [
          "You're on the right track!  Here's how we can make that work: \n\n**1. Training me with the MAKAUT Syllabus PDF:** \n\n* **Unfortunately, I can't directly process PDF files.** I'm a language model, not a file reader.  We need to convert the PDF content into text. \n* **Use a PDF to Text converter:** There are many free online tools or software that can convert PDFs into plain text. Copy the output text and paste it into our conversation. \n* **Highlight key information:** When pasting the syllabus,  you can help me understand it better by highlighting key sections like course names, learning objectives, and important skills.\n\n**2. Using a Python prompt to generate the roadmap:**\n\n* **You're right, Python is a great tool for automation!** However, I'm not yet capable of directly executing Python code.  We need to use a different approach:\n* **Tell me what you want the Python prompt to do:** For example, you might say: \"Create a Python program that reads the MAKAUT syllabus and identifies outdated courses based on specific keywords.\" I can then translate your request into human language and generate the roadmap based on that information. \n* **Focus on the desired output:** Instead of writing the Python code itself, describe the roadmap you want, and I'll do my best to generate it in a way that's helpful.\n\n**Here's a potential workflow:**\n\n1. **You:** Provide the text of the MAKAUT syllabus.\n2. **You:** Tell me what kind of roadmap you want (e.g., \"Generate a roadmap for updating the syllabus to align with industry needs\").\n3. **Me:** I will use the syllabus information and your instructions to create a roadmap.\n4. **You:** Evaluate the roadmap and provide feedback or additional instructions.\n5. **We continue to iterate:** You can refine the roadmap by providing additional details or asking me to focus on specific areas.\n\nRemember, I'm still under development, and learning new things every day. The more information you give me, the better I can understand your needs and provide useful outputs.  \n\nLet's start creating that MAKAUT roadmap! \n",
        ],
      },
      {
        "role": "user",
        "parts": [
          "no no i will call the gemini api through python app and i need u to give me a roadmap based on the syllabus i treen you with here\n",
        ],
      },
      {
        "role": "model",
        "parts": [
          "Ah, I understand now! You want to use a Python app to access the Gemini API, train it on the MAKAUT syllabus, and then use that trained model to generate a roadmap. That's a fantastic approach!\n\nHere's how we can work together:\n\n1. **You train the Gemini API:**\n    *  You'll use your Python app to call the Gemini API and feed it the text of the MAKAUT syllabus.\n    * **Important Note:** I can't directly access the Gemini API or your Python app. I am a language model, not a code runner. \n    * **You'll need to handle the training and API interactions in your Python code.**\n\n2. **I provide roadmap generation support:**\n    * Once you've trained the Gemini API, you can use your app to query it for roadmap information.\n    * **You'll give me the specific questions or instructions you want to ask the trained model.** For example, you might say:\n       * \"What are the top three areas in the MAKAUT syllabus that need updating to align with industry needs?\"\n       * \"Create a roadmap for introducing a new specialization in [specific field] based on the MAKAUT syllabus.\"\n    * **I will analyze the response from the trained model and help you formulate the roadmap.**  I can help you:\n        *  Organize the information into a clear and actionable format. \n        *  Suggest additional steps or considerations based on my understanding of educational best practices.\n        *  Identify potential challenges and opportunities related to your roadmap.\n\n**Key Points to Remember:**\n\n* **I'm here to help you interpret and use the information from the trained Gemini API.** I can't directly access the API or train it.\n* **You will need to have a working Python app that connects to the Gemini API and performs the training.**\n* **Your input and guidance are essential for me to provide the most useful roadmap.** Be clear with your questions and goals.\n\nI'm excited to see how you use the Gemini API for this project. Let's work together to create a successful roadmap for MAKAUT! \n",
        ],
      },
      {
        "role": "user",
        "parts": [
          "whats this token count on the side?\n",
        ],
      },
      {
        "role": "model",
        "parts": [
          "You're referring to the \"token count\" that you see on the side of our conversation. It's a way of measuring how much text has been used in our interaction. \n\nHere's a breakdown:\n\n* **What are tokens?**  They're the basic units of text that language models like me use.  A token can be a word, a punctuation mark, or even parts of words. \n* **Why do we count tokens?** It's a way of tracking how much processing power I'm using. Each token requires a certain amount of computing resources.\n* **How does it affect you?** Most language models, including me, have limits on how many tokens they can process in a single conversation. This is to ensure that resources are used efficiently and that everyone has a chance to use the model.\n* **What happens when you reach the limit?**  You'll usually get a message indicating that you've reached the token limit and might need to start a new conversation or shorten your prompts.\n\n**Key things to remember:**\n\n* **Longer messages and complex requests usually use more tokens.**  \n* **Keep your prompts concise and focused to avoid exceeding the token limit.** \n* **Don't worry too much about the token count!**  It's just a technical detail to help us manage the workload. \n\nI hope this explanation is helpful. Feel free to ask if you have any more questions. \n",
        ],
      },
      {
        "role": "user",
        "parts": [
          "Ok I will upload some pdfs for different semesters now. Read and understand the data on in. Reply in one word.",
        ],
      },
      {
        "role": "model",
        "parts": [
          "Okay. \n",
        ],
      },
      {
        "role": "user",
        "parts": [
          files[0],
          files[1],
          files[2],
          files[3],
          files[4],
          files[5],
          files[6],
          "the 1_2 file is the syllabus of first and second semester combined. the rest of the filenames correspnd to whichever semesters' syllabus they refer to.\n",
        ],
      },
      {
        "role": "model",
        "parts": [
          "Understood. \n",
        ],
      },
      {
        "role": "user",
        "parts": [
          "Now give me a brief overview of the third semester syllabus\n",
        ],
      },
      {
        "role": "model",
        "parts": [
          "The third semester syllabus for B.Tech Computer Science & Engineering at MAKAUT focuses on strengthening foundational knowledge in electronics, data structures, and computer organization, while introducing essential software engineering concepts. \n\nHere's a quick breakdown:\n\n**Core Subjects:**\n\n* **Analog & Digital Electronics:**  Covers analog amplifiers, oscillators, digital logic circuits, flip-flops, and A/D and D/A conversion techniques.\n* **Data Structures & Algorithm:**  Explores fundamental data structures like stacks, queues, linked lists, trees, and algorithms for sorting and searching. \n* **Computer Organization:**  Delves into the internal workings of computers, including instruction sets, memory organization, control unit design, and input/output operations.\n* **Object Oriented Programming:**  Introduces core OOP concepts like abstraction, encapsulation, inheritance, and polymorphism. \n\n**Other Courses:**\n\n* **Mathematics-III (Differential Calculus):**  Covers differential and integral calculus, including concepts like convergence, continuity, partial derivatives, and differential equations.\n* **Economics for Engineers (Humanities-II):**  Introduces engineering economics, cost estimation, cash flow analysis, depreciation, replacement analysis, and accounting basics. \n\n**Lab Work:**\n\n* **Analog & Digital Electronics Lab:**  Practical application of electronics concepts through circuit design and implementation.\n* **Data Structures & Algorithm Lab:**  Coding and testing of algorithms and data structures.\n* **Computer Organization Lab:**  Building and testing basic computer system components.\n* **IT Workshop (Sci Lab/MATLAB/Python/R):**  Hands-on experience with a scripting language for data analysis and problem-solving. \n\nThis semester lays a strong foundation for higher-level computer science topics covered in later semesters. \n",
        ],
      },
      {
        "role": "user",
        "parts": [
          "You can ignore all the labworks",
        ],
      },
      {
        "role": "model",
        "parts": [
          "Got it. You want to focus on the theory-based courses in the third semester syllabus. Here's a refined overview:\n\n**Third Semester: The Building Blocks of Computer Science**\n\nThis semester lays the groundwork for your journey into computer science by equipping you with essential skills and knowledge in these key areas:\n\n**1. Electronics for Computer Scientists:** \n\n* **Analog & Digital Electronics:** Learn how transistors, amplifiers, and oscillators work, and explore fundamental digital logic concepts. This knowledge is crucial for understanding the hardware components that power our computers.\n\n**2. Organizing and Manipulating Data:**\n\n* **Data Structures & Algorithm:**  Discover how to organize information efficiently with data structures like stacks, queues, and trees.  You'll learn algorithms to search, sort, and manage data effectively, a foundation for programming and software development.\n\n**3. The Heart of the Computer:**\n\n* **Computer Organization:**  Dive into the internal workings of computers, exploring how instructions are executed, memory is accessed, and input/output operations are managed. Gain a deeper understanding of how hardware and software interact.\n\n**4. Building with Objects:**\n\n* **Object Oriented Programming:**  This course introduces object-oriented programming (OOP) concepts like classes, objects, inheritance, and polymorphism. OOP is a powerful paradigm used to build complex and reusable software systems.\n\n**5. Mathematical Foundation:**\n\n* **Mathematics-III (Differential Calculus):**  Strengthen your understanding of calculus, a powerful tool for modeling and solving problems in engineering and computer science. \n\n**6. Economics for Engineers:**\n\n* **Economics for Engineers (Humanities-II):**  Learn about engineering economics, cost analysis, and financial management – skills that will be useful when you develop and implement software projects. \n\nBy mastering these concepts, you'll gain a solid foundation for the more advanced computer science topics you'll encounter in your later semesters. \n",
        ],
      },
      {
        "role": "user",
        "parts": [
          "Make sure you cover all the topics under each subject because makauts tends to ask questions from literally anywhere. ",
        ],
      },
      {
        "role": "model",
        "parts": [
          "You're right, MAKAUT is known for its wide-ranging exam questions! I'll make sure to cover all the topics mentioned in the syllabus for each subject,  giving you a comprehensive overview. \n\nHere's a detailed breakdown of the third semester syllabus, keeping MAKAUT's exam style in mind:\n\n**1. Analog & Digital Electronics (ESC-301)**\n\n**A. Analog Electronics:**\n\n* **Amplifiers:** Understand different amplifier classes (A, B, AB, C), their power, and efficiency.\n* **Feedback and Oscillation:** Recap basic feedback concepts, phase shift oscillators, Wein Bridge oscillators, and astable and monostable multivibrators.\n* **Schmitt Trigger & 555 Timer:**  Learn the operation of Schmitt trigger circuits and the versatile 555 timer.\n\n**B. Digital Electronics:**\n\n* **Number Systems:** Master binary, BCD, ASCII, EBDIC, and Gray codes, including conversions.\n* **Signed Binary Representation:**  Understand how to represent signed binary numbers using 1's and 2's complement.\n* **Boolean Algebra:**  Recap Boolean algebra basics, including SOP, POS forms, and logic minimization using algebraic methods.\n* **Combinational Circuits:**  Learn how to design adders, subtractors, encoders, decoders, comparators, multiplexers, demultiplexers, and parity generators.\n* **Sequential Circuits:**  Study basic flip-flops and latches, different types of flip-flops (SR, JK, D, T), master-slave flip-flops, and various types of registers. \n* **Counters:**  Gain a basic understanding of synchronous and asynchronous counters (design details not required), and learn how to design a Mod N counter.\n* **A/D and D/A Conversion:**  Cover fundamental concepts and techniques for A/D and D/A conversion (specifically R-2-R DAC and successive approximation ADC).\n* **Logic Families:**  Get an overview of TTL, ECL, MOS, and CMOS logic families.\n\n**2. Data Structures & Algorithm (PCC-CS301)**\n\n* **Introduction:** Understand basic data structure terminologies, data structure operations, algorithm analysis, asymptotic notations, and time-space trade-offs. Learn about linear search and binary search techniques and their complexity analysis.\n* **Stacks & Queues:** Explore ADT stack operations, algorithms, and complexity analysis.  Learn applications like expression conversion and evaluation. Study different types of queues (simple, circular, priority) and their operations, algorithms, and complexity analysis.\n* **Linked Lists:**  Master singly linked lists, operations (traversal, search, insertion, deletion), and linked representations of stacks and queues.  Understand doubly linked lists, circular linked lists, and their operations.\n* **Trees:** Learn basic tree terminologies, different types of trees (binary, threaded binary, binary search, AVL), operations, algorithms, and complexity analysis.  Explore applications of binary trees and understand B-trees and B+ trees.\n* **Sorting & Hashing:**  Study the objectives and properties of sorting algorithms like selection sort, bubble sort, insertion sort, quicksort, mergesort, and heapsort. Compare their performance and understand hashing concepts.\n* **Graphs:** Learn basic graph terminologies, representations, and graph search and traversal algorithms.\n\n**3. Computer Organization (PCC-CS302)**\n\n* **Basic Computer Architecture:** Review basic computer architecture, understand quantitative design techniques, performance measurement, and the fetch-decode-execute cycle. Learn about instructions, operands, registers, storage, instruction formats, instruction sets, and addressing modes.  Cover number systems and fixed/floating-point number representation.\n* **Arithmetic Operations:** Design adders (ripple carry and carry look ahead), ALUs, fixed-point multiplication (Booth's algorithm), fixed-point division (restoring and non-restoring algorithms), and floating-point operations (IEEE 754 standard).\n* **Memory Organization:**  Learn about memory unit design, CPU-memory interfacing, memory organization, static/dynamic memory, memory hierarchy, and associative memory.  Explore cache memory and virtual memory concepts.\n* **Control Unit Design:**  Study hardwired and microprogrammed control units and understand instruction pipelining.\n* **RISC vs. CISC:**  Compare and contrast RISC and CISC architectures.\n* **I/O Operations:**  Learn about handshaking, polled I/O, interrupts, and DMA. \n\n**4. Object Oriented Programming (PCC-CS503)**\n\n* **Abstract Data Types (ADTs):**  Understand ADTs, their specification, implementation, state space, invariants, abstraction functions, and operations.\n* **OOP Features:**  Learn about encapsulation, object identity, and polymorphism.\n* **Inheritance:**  Understand inheritance in OOP design, and explore design patterns (specifically, the iterator pattern).\n* **Model-View-Controller Pattern:**  Study the MVC pattern, commands as methods and objects, and OOP language implementation details.\n* **Memory Management:** Learn about memory management techniques in OOP. \n* **Generic Types & Collections:** Understand generic types and collections in OOP.\n* **Graphical User Interfaces (GUIs):**  Explore GUIs, graphical programming with Swing and Scale, and the software development process. \n\n**5. Mathematics-III (Differential Calculus) (BSC-301)**\n\n* **Convergence:** Study convergence of sequences and series, tests for convergence, power series, and Taylor's series.\n* **Series for Functions:**  Learn series for exponential, trigonometric, and logarithmic functions.\n* **Calculus:** Understand limits, continuity, partial derivatives, chain rule, implicit functions, Jacobians, directional derivatives, total derivatives, and related problems.\n* **Maxima, Minima, & Saddle Points:**  Learn about finding maxima, minima, and saddle points of functions. \n* **Gradient, Curl, & Divergence:**  Understand the concepts of gradient, curl, and divergence.\n* **Double & Triple Integrals:**  Master double and triple integrals in Cartesian and polar coordinates, including changing the order of integration and changing variables.\n* **Theorems:**  Be familiar with Green's, Gauss's, and Stokes' theorems (statements only) and related problems.\n* **Differential Equations:** Study first-order differential equations, including exact, linear, and Bernoulli's equations. Understand equations not of first degree and their solutions, including general and singular solutions.\n* **Second-Order Differential Equations:** Explore second-order linear differential equations with constant coefficients, using the D-operator method, method of variation of parameters, and Cauchy-Euler equations.\n\n**6. Economics for Engineers (Humanities-II) (HSMC-301)**\n\n* **Economic Decision Making:** Understand the role and scope of engineering economics, the process of economic decision making, and problem identification.\n* **Engineering Costs:**  Learn about fixed, variable, marginal, average, sunk, opportunity, recurring, non-recurring, incremental, cash, and book costs.  Study cost estimation techniques like per-unit models, segmenting models, cost indexes, power-sizing models, and learning curves. \n* **Cash Flow & Interest:** Understand cash flow diagrams, cash flow categories, and computations. Learn about the time value of money, nominal and effective interest, and debt repayment.\n* **Rate of Return Analysis:**  Master calculations involving salvage value, annual cash flow, internal rate of return, and incremental analysis. \n* **Economic Analysis Methods:**  Understand future worth analysis, benefit-cost ratio analysis, sensitivity analysis, and breakeven analysis. \n* **Public Sector Analysis:**  Learn how to quantify and value benefits and drawbacks in public sector projects.\n* **Inflation & Price Change:**  Understand inflation, its effects and causes, price change with indexes, types of indexes, and how to use price indexes in engineering economic analysis.\n* **Present Worth Analysis:**  Learn about the end-of-year convention, economic analysis viewpoints, borrowed money viewpoint, effects of inflation/deflation, taxes, economic criteria, and applying present worth techniques to multiple alternatives.\n* **Uncertainty:**  Understand how to handle uncertainty in future events using estimates, probability, joint probability distributions, expected value, economic decision trees, risk, risk-return analysis, simulation, and real options.\n* **Depreciation:**  Explore depreciation fundamentals, depreciation methods (straight-line, declining balance), and tax regulations related to depreciation.\n* **Replacement Analysis:**  Learn about replacement analysis, minimum cost life, marginal cost, and minimum cost life problems.\n* **Accounting:**  Understand accounting functions, balance sheets, income statements, and financial ratios. Explore capital transactions, cost accounting, direct and indirect costs, and indirect cost allocation.\n\nI hope this comprehensive overview is helpful!  Please let me know if you have any more questions or if you want to focus on specific topics. \n\n\n",
        ],
      },
      {
        "role": "user",
        "parts": [
          "You can ignore the subject codes too. The only things you need to print are Subjet name and subtopics under them for now.",
        ],
      },
      {
        "role": "model",
        "parts": [
          "Alright, here's the third semester syllabus with just the subject names and subtopics, excluding subject codes:\n\n**Analog & Digital Electronics**\n\n* Amplifiers: Different amplifier classes (A, B, AB, C), power, efficiency\n* Feedback and Oscillation: Basic feedback concepts, phase shift oscillators, Wein Bridge oscillators, astable and monostable multivibrators\n* Schmitt Trigger & 555 Timer: Operation of Schmitt trigger circuits, versatile 555 timer\n* Number Systems: Binary, BCD, ASCII, EBDIC, Gray codes, conversions\n* Signed Binary Representation: Representing signed binary numbers using 1's and 2's complement\n* Boolean Algebra: Basics, SOP, POS forms, logic minimization using algebraic methods\n* Combinational Circuits: Design of adders, subtractors, encoders, decoders, comparators, multiplexers, demultiplexers, parity generators\n* Sequential Circuits: Basic flip-flops and latches, different types of flip-flops (SR, JK, D, T), master-slave flip-flops, various types of registers\n* Counters: Synchronous and asynchronous counters (design details not required), Mod N counter design\n* A/D and D/A Conversion: Fundamental concepts and techniques (specifically R-2-R DAC and successive approximation ADC)\n* Logic Families: Overview of TTL, ECL, MOS, and CMOS logic families\n\n**Data Structures & Algorithm**\n\n* Introduction: Basic data structure terminologies, data structure operations, algorithm analysis, asymptotic notations, time-space trade-offs, linear search, binary search techniques, complexity analysis\n* Stacks & Queues: ADT stack operations, algorithms, complexity analysis, applications (expression conversion and evaluation), different types of queues (simple, circular, priority), operations, algorithms, complexity analysis\n* Linked Lists: Singly linked lists, operations (traversal, search, insertion, deletion), linked representations of stacks and queues, doubly linked lists, circular linked lists, operations\n* Trees: Basic tree terminologies, different types of trees (binary, threaded binary, binary search, AVL), operations, algorithms, complexity analysis, applications of binary trees, B-trees, B+ trees\n* Sorting & Hashing: Objectives and properties of sorting algorithms (selection sort, bubble sort, insertion sort, quicksort, mergesort, heapsort), performance comparison, hashing concepts\n* Graphs: Basic graph terminologies, representations, graph search and traversal algorithms\n\n**Computer Organization**\n\n* Basic Computer Architecture: Review, quantitative design techniques, performance measurement, fetch-decode-execute cycle, instructions, operands, registers, storage, instruction formats, instruction sets, addressing modes, number systems, fixed/floating-point number representation\n* Arithmetic Operations: Design of adders (ripple carry and carry look ahead), ALUs, fixed-point multiplication (Booth's algorithm), fixed-point division (restoring and non-restoring algorithms), floating-point operations (IEEE 754 standard)\n* Memory Organization: Memory unit design, CPU-memory interfacing, memory organization, static/dynamic memory, memory hierarchy, associative memory, cache memory, virtual memory concepts\n* Control Unit Design: Hardwired and microprogrammed control units, instruction pipelining\n* RISC vs. CISC: Comparison and contrast of RISC and CISC architectures\n* I/O Operations: Handshaking, polled I/O, interrupts, DMA\n\n**Object Oriented Programming**\n\n* Abstract Data Types (ADTs): ADTs, specification, implementation, state space, invariants, abstraction functions, operations\n* OOP Features: Encapsulation, object identity, polymorphism\n* Inheritance: Inheritance in OOP design, design patterns (specifically, the iterator pattern)\n* Model-View-Controller Pattern: MVC pattern, commands as methods and objects, OOP language implementation details\n* Memory Management: Memory management techniques in OOP\n* Generic Types & Collections: Generic types and collections in OOP\n* Graphical User Interfaces (GUIs): GUIs, graphical programming with Swing and Scale, software development process\n\n**Mathematics-III (Differential Calculus)**\n\n* Convergence: Convergence of sequences and series, tests for convergence, power series, Taylor's series\n* Series for Functions: Series for exponential, trigonometric, and logarithmic functions\n* Calculus: Limits, continuity, partial derivatives, chain rule, implicit functions, Jacobians, directional derivatives, total derivatives, related problems\n* Maxima, Minima, & Saddle Points: Finding maxima, minima, and saddle points of functions\n* Gradient, Curl, & Divergence: Concepts of gradient, curl, and divergence\n* Double & Triple Integrals: Double and triple integrals in Cartesian and polar coordinates, changing the order of integration, changing variables\n* Theorems: Green's, Gauss's, and Stokes' theorems (statements only) and related problems\n* Differential Equations: First-order differential equations (exact, linear, Bernoulli's equations), equations not of first degree, solutions (general and singular), second-order linear differential equations with constant coefficients (D-operator method, method of variation of parameters, Cauchy-Euler equations)\n\n**Economics for Engineers**\n\n* Economic Decision Making: Role and scope of engineering economics, economic decision-making process, problem identification\n* Engineering Costs: Fixed, variable, marginal, average, sunk, opportunity, recurring, non-recurring, incremental, cash, and book costs, cost estimation techniques (per-unit models, segmenting models, cost indexes, power-sizing models, learning curves)\n* Cash Flow & Interest: Cash flow diagrams, cash flow categories, computations, time value of money, nominal and effective interest, debt repayment\n* Rate of Return Analysis: Calculations involving salvage value, annual cash flow, internal rate of return, incremental analysis\n* Economic Analysis Methods: Future worth analysis, benefit-cost ratio analysis, sensitivity analysis, breakeven analysis\n* Public Sector Analysis: Quantifying and valuing benefits and drawbacks in public sector projects\n* Inflation & Price Change: Inflation, its effects and causes, price change with indexes, types of indexes, using price indexes in engineering economic analysis\n* Present Worth Analysis: End-of-year convention, economic analysis viewpoints, borrowed money viewpoint, effects of inflation/deflation, taxes, economic criteria, applying present worth techniques to multiple alternatives\n* Uncertainty: Handling uncertainty in future events using estimates, probability, joint probability distributions, expected value, economic decision trees, risk, risk-return analysis, simulation, real options\n* Depreciation: Depreciation fundamentals, depreciation methods (straight-line, declining balance), tax regulations related to depreciation\n* Replacement Analysis: Replacement analysis, minimum cost life, marginal cost, minimum cost life problems\n* Accounting: Accounting functions, balance sheets, income statements, financial ratios, capital transactions, cost accounting, direct and indirect costs, indirect cost allocation\n\nI hope this helps! Remember, this is a condensed overview, so be sure to refer to the actual MAKAUT syllabus for more detailed information. \n",
        ],
      },
      {
        "role": "user",
        "parts": [
          "Good now give me a similar overview for all the subjects in all the semester",
        ],
      },
      {
        "role": "model",
        "parts": [
          "Here's a comprehensive syllabus overview for all semesters of B.Tech Computer Science & Engineering at MAKAUT, covering all the subjects, but excluding subject codes and lab sections:\n\n**First Year**\n\n**First Semester**\n\n* **Physics-I (or Chemistry-I):** Mechanics, Optics (interference, diffraction, polarization, lasers), Electromagnetism (Maxwell's equations, dielectric and magnetic properties of materials), Quantum Mechanics, Statistical Mechanics.\n* **Mathematics – I (A or B):** Calculus (integration, differentiation, mean value theorems, Taylor's series, Maclaurin's series), Matrices (operations, linear systems, rank, determinants, inverse), Vector Spaces (linear independence, basis, dimension, linear transformations, eigenvalues, eigenvectors, inner product spaces).\n* **Basic Electrical Engineering:** DC circuits, AC circuits, Transformers, Electrical Machines (induction motors, DC motors, synchronous generators), Power Converters, Electrical Installations.\n\n**Second Semester**\n\n* **Physics-I (or Chemistry-I):** (Same as First Semester)\n* **Mathematics – II (A or B):** Calculus (integration, differentiation, mean value theorems, Taylor's series, Maclaurin's series), Sequence and Series (convergence, power series, Fourier series), Multivariate Calculus (limits, continuity, partial derivatives, directional derivatives, total derivatives, maxima, minima, saddle points, Gradient, Curl, and Divergence), Matrices (inverse, rank, linear systems, symmetric, skew-symmetric, orthogonal matrices, determinants, eigenvalues, eigenvectors, diagonalization, Cayley-Hamilton Theorem).\n* **Programming for Problem Solving:** Introduction to Programming, Algorithms, Data types, operators, conditional branching, loops, arrays, functions, recursion, structures, pointers, file handling.\n* **English:** Vocabulary building, basic writing skills, identifying common errors in writing, nature and style of sensible writing, writing practices.\n\n**Second Year**\n\n**Third Semester**\n\n* **Analog & Digital Electronics:** Amplifiers, feedback and oscillation, Schmitt Trigger, 555 Timer, number systems, signed binary representation, Boolean algebra, combinational circuits, sequential circuits, counters, A/D and D/A conversion, logic families.\n* **Data Structures & Algorithm:** Introduction, stacks and queues, linked lists, trees, sorting, hashing, graphs.\n* **Computer Organization:** Basic computer architecture, arithmetic operations, memory organization, control unit design, RISC vs. CISC, I/O operations.\n* **Object Oriented Programming:** Abstract data types, OOP features, inheritance, model-view-controller pattern, memory management, generic types and collections, graphical user interfaces.\n* **Mathematics-III (Differential Calculus):** Convergence, series for functions, calculus, maxima, minima, saddle points, gradient, curl, and divergence, double and triple integrals, theorems (Green's, Gauss's, Stokes'), differential equations.\n* **Economics for Engineers (Humanities-II):** Economic decision making, engineering costs, cash flow, interest, rate of return analysis, economic analysis methods, public sector analysis, inflation, present worth analysis, uncertainty, depreciation, replacement analysis, accounting.\n\n**Fourth Semester**\n\n* **Discrete Mathematics:** Sets, relations, functions, principles of mathematical induction, basic counting techniques, propositional logic, algebraic structures, graphs and trees.\n* **Computer Architecture:** Quantitative techniques in computer design, pipelining, hierarchical memory technology, instruction-level parallelism, multiprocessor architecture, non-von Neumann architectures.\n* **Formal Language & Automata Theory:** Introduction, regular languages and finite automata, context-free languages and pushdown automata, context-sensitive languages, Turing machines, undecidability.\n* **Design and Analysis of Algorithms:** Introduction, fundamental algorithmic strategies, graph and tree algorithms, tractable and intractable problems, approximation algorithms, randomized algorithms.\n* **Biology:** Fundamental differences between science and engineering, hierarchy of life forms, genetics, biomolecules, enzymes, information transfer, macromolecular analysis, metabolism, microbiology.\n* **Environmental Sciences:** Basic ideas of environment, materials balance, environmental degradation, elements of ecology, atmospheric composition, hydrosphere, lithosphere, solid waste, noise pollution, environmental impact assessment, environmental laws.\n\n**Third Year**\n\n**Fifth Semester**\n\n* **Software Engineering:** Overview of system analysis and design, system design, coding and documentation, testing, software project management, UML diagrams.\n* **Compiler Design:** Introduction to compiling, lexical analysis, syntax analysis, syntax directed translation, type checking, runtime environments, intermediate code generation, code optimization, code generation.\n* **Operating Systems:** Introduction, processes, inter-process communication, deadlocks, memory management, I/O hardware, I/O software, file management, disk management.\n* **Object Oriented Programming:** Abstract data types, OOP features, inheritance, model-view-controller pattern, memory management, generic types and collections, graphical user interfaces.\n* **Introduction to Industrial Management (Humanities-III):** System concept, management, organization structure, organizational culture, CPM and PERT, materials management, production planning and control, value analysis, cost control, recent trends in industrial management.\n* **Theory of Computation:** Fundamentals, finite state machines, regular languages, context-free grammars, pushdown automata, Turing machines, halting problem, Church-Turing thesis.\n* **Artificial Intelligence:** Introduction, intelligent agents, problem solving, search techniques, knowledge and reasoning, probabilistic reasoning, natural language processing, learning, expert systems.\n* **Advanced Computer Architecture:** Parallel processing architectures, data and resource dependencies, network topologies, RISC vs. CISC, memory hierarchy, pipelining, multiprocessors, vector processing, array processors, data flow architecture, parallel programming models.\n* **Computer Graphics:** Introduction to computer graphics, scan conversion, 2D and 3D transformations, curves, hidden surfaces, color and shading models, ray tracing.\n* **Constitution of India:** Introduction, features, union government, state government, local administration, election commission.\n* **Essence of Indian Knowledge Tradition:** Introduction to traditional knowledge, protection of traditional knowledge, legal framework, traditional knowledge and intellectual property, traditional knowledge in different sectors.\n\n**Sixth Semester**\n\n* **Database Management Systems:** Database system architecture, data models, relational query languages, relational database design, query processing and optimization, storage strategies, transaction processing, database security, advanced topics.\n* **Computer Networks:** Data communication components, data link layer, network layer, transport layer, application layer, cryptography.\n* **Advanced Algorithms:** Sorting, graphs, matroids, graph matching, flow-networks, matrix computations, shortest paths, NP-completeness, approximation algorithms, randomized algorithms.\n* **Distributed Database Management System:** Introduction, architecture, design, query processing, transaction management, concurrency control, reliability, parallel database systems, advanced topics.\n* **Signals & Systems:** Introduction to signals and systems, behavior of continuous and discrete-time LTI systems, Fourier, Laplace, and z-transforms, sampling theorem, applications.\n* **Image Processing:** Introduction, digital image formation, mathematical preliminaries, image enhancement, image restoration, image segmentation.\n* **Parallel and Distributed Algorithms:** Basic techniques, message passing, pipelining, synchronous computations, distributed shared memory, algorithms.\n* **Data Warehousing and Data Mining:** Introduction, mining frequent patterns, classification and prediction, cluster analysis, mining time series data, mining data streams, web mining, distributed data mining.\n* **Human Computer Interaction:** Human, computer, interaction models, interactive design basics, cognitive models, socio-organizational issues, communication and collaboration models, mobile ecosystem, web interface design, recent trends.\n* **Pattern Recognition:** Basics, Bayesian decision theory, parameter estimation methods, hidden Markov models, dimensionality reduction methods, non-parametric estimation techniques, linear discriminant function based classifier, non-metric methods, unsupervised learning and clustering.\n* **Numerical Methods:** Approximation in numerical computation, interpolation, numerical integration, numerical solution of systems of linear equations, numerical solution of algebraic equations, numerical solution of ordinary differential equations.\n* **Human Resource Development and Organizational Behavior:** Organizational behavior, personality and attitudes, perception, motivation, group behavior, communication, leadership, organizational politics, conflict management, organizational design.\n* **Research Methodology:** Research formulation and design, data collection and analysis, research ethics, intellectual property, scholarly publishing, interpretation and report writing.\n* **Project Management and Entrepreneurship:** Introduction to entrepreneurship, entrepreneurial motivation, idea incubation, information, closing the window, applications and project reports preparation, project management, project feasibility studies, project planning, project scheduling and costing, project monitoring and control, case studies.\n\n**Fourth Year**\n\n**Seventh Semester**\n\n* **Quantum Computing:** Qubits, quantum states, matrices and operators, commutator algebra, Heisenberg uncertainty principle, tensor products, density operator, quantum measurement theory, recent trends.\n* **Cloud Computing:** Definition, types, deployment models, service models, characteristics, benefits, virtualization technologies, load balancing, hypervisors, porting applications, cloud infrastructure, cloud security, service oriented architecture, applications and APIs, cloud-based storage, cloud mail services.\n* **Digital Signal Processing:** Discrete-time signals and systems, Z-transform, Discrete Fourier Transform, design of digital filters, applications of digital signal processing.\n* **Multi-agent Intelligent Systems:** What is an agent, intelligent agents, multi-agent systems, advanced topics.\n* **Machine Learning:** Supervised learning, unsupervised learning, evaluating machine learning algorithms, model selection, ensemble methods, sparse modeling, deep learning, scalable machine learning, advanced topics.\n* **Neural Networks and Deep Learning:** Introduction, feed forward neural networks, training neural networks, conditional random fields, deep learning, deep learning research.\n* **Soft Computing:** Introduction, fuzzy sets and fuzzy logic systems, neural networks, genetic algorithms, particle swarm optimization, other soft computing techniques.\n* **Adhoc-Sensor Network:** Introduction, architectures, communication protocols, infrastructure establishment, sensor network platforms and tools.\n* **Information Theory and Coding:** Source coding, channel capacity and coding, linear and block codes for error correction, cyclic codes, BCH codes, convolutional codes.\n* **Cyber Security:** Introduction, hackers and cyber crimes, ethical hacking, social engineering, cyber forensics, auditing, cyber ethics and laws.\n* **Operation Research:** Basic LPP, solution of LPP, transportation problems, assignment problems, network analysis, inventory control, game theory, queuing theory.\n* **Multimedia Systems:** Introduction, text and audio, image and video, synchronization, storage models, image and video database, document architecture, multimedia applications.\n* **Introduction to Philosophical Thoughts:** Nature of Indian philosophy, Vedic and Upanisadic views, Carvaka school, Jainism, Buddhism, Nyaya.\n* **Project Management and Entrepreneurship:** (Same as Fifth Semester)\n\n**Eighth Semester**\n\n* **Signals and Networks:** Objective and overview, signal and system types, periodic signal analysis, aperiodic signal analysis, elements of electrical network, network parameters and functions, network theorems, graph theory, analog filter design.\n* **Cryptography and Network Security:** Attacks on computers, cryptography, symmetric key algorithms, asymmetric key algorithms, digital signatures, internet security protocols, user authentication, electronic mail security, firewalls.\n* **Speech and Natural Language Processing:** Introduction, tokenization, morphology, language modeling, hidden Markov models, POS tagging, text classification, context-free grammar, computational lexical semantics, information retrieval.\n* **Web and Internet Technology:** Introduction, World Wide Web, TCP/IP, subnetting, internet routing protocol, electronic mail, HTML, XML, CGI scripts, PERL, JavaScript, cookies, Java applets, client-server programming, threats, network security techniques, firewall, internet telephony, multimedia applications, search engine and web crawler.\n* **Internet of Things:** Environmental parameters measurement, sensors, sensor characteristics, architecture of smart sensors, interface electronic circuit, recent trends.\n* **Big Data Analytics:** Introduction, NoSQL, data format, analyzing data with Hadoop, MapReduce workflows, HBase, Cassandra, Pig, Hive.\n* **Cyber Law and Ethics:** Introduction, cybercrime, cybercrime mobile, tools and methods, phishing, cybercrime and cybersecurity.\n* **Mobile Computing:** PCS, GSM, GPRS, mobile data communication, WAP, WLL, 3G, global mobile satellite systems, wireless enterprise networks, server-side programming.\n* **Robotics:** Introduction, elements of robots, kinematics of serial robots, kinematics of parallel robots, velocity and static analysis, dynamics, motion planning and control, modeling and control of flexible robots, modeling and analysis of wheeled mobile robots, selected advanced topics.\n* **Soft Skill & Interpersonal Communication:** Introduction, conflict resolution skills, habits, communication, technology and communication, nonverbal communication, presentation skills, reading skills, human relations.\n* **E-Commerce & ERP:** Overview, technologies, business models, e-strategy, 4Cs (convergence, collaborative computing, content management, call center), supply chain management, e-payment mechanism, e-marketing, EDI, risk, ERP.\n* **Micro-electronics and VLSI Design:** Introduction, CMOS circuits, processing technology, layout design rule, power dissipation, programmable logic, placement, routing, verification and testing, overview of VHDL.\n* **Economic Policies in India:** Economic development, planning, demographic features, poverty and inequality, resource base, agricultural sector, industrial policy, public finances, money, banking and prices, external sector, economic reforms.\n* **Project-II & Dissertation:** Further development of Project-I, in-depth study of the assigned topic, review and finalization of approach, preparing an action plan, detailed analysis, final development, paper for presentation/publication, dissertation, final seminar presentation.\n\nThis should give you a solid foundation for understanding the breadth of the B.Tech Computer Science & Engineering curriculum at MAKAUT. If you have any specific questions about particular subjects or topics, feel free to ask! \n",
        ],
      },
      {
        "role": "user",
        "parts": [
          "Now if I ask you to generate a roadmap for 3rd semester Economics to be covered in 7 days, touching every topics, studying for 6 hours a day, in json format. Show me something good.",
        ],
      },
      {
        "role": "model",
        "parts": [
          "```json\n{\n  \"semester\": \"Third Semester\",\n  \"subject\": \"Economics for Engineers\",\n  \"study_time\": \"6 hours per day\",\n  \"duration\": \"7 days\",\n  \"roadmap\": [\n    {\n      \"day\": 1,\n      \"topics\": [\n        \"Economic Decision Making: Role and scope of engineering economics, the process of economic decision making, problem identification\",\n        \"Engineering Costs: Fixed, variable, marginal, average, sunk, opportunity, recurring, non-recurring, incremental, cash, and book costs\",\n        \"Cost Estimation Techniques: Per-unit models, segmenting models, cost indexes, power-sizing models, learning curves\"\n      ],\n      \"notes\": \"Focus on understanding the basics of economic decision-making and different types of costs in engineering projects.\"\n    },\n    {\n      \"day\": 2,\n      \"topics\": [\n        \"Cash Flow & Interest: Cash flow diagrams, cash flow categories, computations, time value of money, nominal and effective interest, debt repayment\",\n        \"Rate of Return Analysis: Calculations involving salvage value, annual cash flow, internal rate of return, incremental analysis\"\n      ],\n      \"notes\": \"Practice creating cash flow diagrams and solving problems related to the time value of money and rate of return.\"\n    },\n    {\n      \"day\": 3,\n      \"topics\": [\n        \"Economic Analysis Methods: Future worth analysis, benefit-cost ratio analysis, sensitivity analysis, breakeven analysis\",\n        \"Public Sector Analysis: Quantifying and valuing benefits and drawbacks in public sector projects\"\n      ],\n      \"notes\": \"Learn how to evaluate different project options using various economic analysis methods and understand the specific considerations for public sector projects.\"\n    },\n    {\n      \"day\": 4,\n      \"topics\": [\n        \"Inflation & Price Change: Inflation, its effects and causes, price change with indexes, types of indexes, using price indexes in engineering economic analysis\",\n        \"Present Worth Analysis: End-of-year convention, economic analysis viewpoints, borrowed money viewpoint, effects of inflation/deflation, taxes, economic criteria, applying present worth techniques to multiple alternatives\"\n      ],\n      \"notes\": \"Understand the impact of inflation on economic analysis and master present worth analysis techniques.\"\n    },\n    {\n      \"day\": 5,\n      \"topics\": [\n        \"Uncertainty: Handling uncertainty in future events using estimates, probability, joint probability distributions, expected value, economic decision trees, risk, risk-return analysis, simulation, real options\",\n        \"Depreciation: Depreciation fundamentals, depreciation methods (straight-line, declining balance), tax regulations related to depreciation\"\n      ],\n      \"notes\": \"Explore methods for incorporating uncertainty into your economic analysis and learn about depreciation concepts.\"\n    },\n    {\n      \"day\": 6,\n      \"topics\": [\n        \"Replacement Analysis: Replacement analysis, minimum cost life, marginal cost, minimum cost life problems\",\n        \"Accounting: Accounting functions, balance sheets, income statements, financial ratios\"\n      ],\n      \"notes\": \"Learn how to analyze replacement decisions and understand the fundamentals of accounting.\"\n    },\n    {\n      \"day\": 7,\n      \"topics\": [\n        \"Capital Transactions: Capital transactions, cost accounting, direct and indirect costs, indirect cost allocation\",\n        \"Review and Consolidation:  Go over important formulas and concepts, work through practice problems, and prepare for potential exam questions.\"\n      ],\n      \"notes\": \"Complete your understanding of cost accounting and review the key concepts covered throughout the week.\"\n    }\n  ]\n}\n```\n\n**Explanation:**\n\n* **semester, subject, study_time, duration:** These provide basic information about the roadmap.\n* **roadmap:** This is an array of days, each with the following:\n    * **day:** The day of the week (1-7).\n    * **topics:** An array of topics to be covered on that day.  I've broken down the syllabus into smaller, manageable chunks.\n    * **notes:**  Provides additional tips and guidance for that day's study. \n\n**Important Notes:**\n\n* **Adaptability:** This roadmap is a good starting point. You might need to adjust the pace based on your individual learning style and the depth of your existing knowledge.\n* **Review & Practice:**  Don't forget to allocate time for reviewing previously studied material and working through practice problems.\n* **Active Learning:** Engage in active learning techniques like summarizing, explaining concepts to someone else, and taking breaks to avoid burnout. \n\nGood luck with your studies! \n",
        ],
      },
      {
        "role": "user",
        "parts": [
          "i want to integrate this feature in my python app. I want to be able to access this exact prompt that i have saved in my drive. How?",
        ],
      },
      {
        "role": "model",
        "parts": [
          "You're on the right track!  Integrating this feature into your Python app is a great idea. You can access the JSON roadmap data from your Google Drive using the Google Drive API. Here's a breakdown of the steps and Python code to get you started:\n\n**1. Set up Google Drive API:**\n\n* **Enable the Drive API:** Go to the Google Cloud Console (https://console.cloud.google.com/) and enable the Google Drive API for your project.\n* **Create API Credentials:** Create API credentials (an API key or OAuth 2.0 client ID) to authorize your app to access Google Drive. \n* **Download the API Library:** Install the Google API Client Library for Python:\n    ```bash\n    pip install google-api-python-client google-auth-httplib2 google-auth-oauthlib\n    ```\n\n**2. Python Code Example:**\n\n```python\nfrom googleapiclient.discovery import build\nfrom google.oauth2 import service_account\nfrom googleapiclient.errors import HttpError\n\n# Replace with your Google Cloud Project ID\nSCOPES = ['https://www.googleapis.com/auth/drive.readonly']\nSERVICE_ACCOUNT_FILE = 'path/to/your/service_account.json'\n\ncredentials = service_account.Credentials.from_service_account_file(\n    SERVICE_ACCOUNT_FILE, scopes=SCOPES)\n\n# Build the Drive API service\ndrive_service = build('drive', 'v3', credentials=credentials)\n\ntry:\n  # Replace with the file ID of your roadmap JSON file\n  file_id = 'your_file_id'\n\n  # Download the file content\n  file_content = drive_service.files().get_media(fileId=file_id).execute()\n  \n  # Decode the JSON data\n  roadmap_data = json.loads(file_content.decode())\n\n  # Use the roadmap_data as needed in your application\n  print(roadmap_data)\n\nexcept HttpError as error:\n  print(f'An error occurred: {error}')\n```\n\n**3. Explanation:**\n\n* **Credentials and Scopes:** You'll need to create a service account in Google Cloud Console and download its JSON key file (`SERVICE_ACCOUNT_FILE`). The `SCOPES` define the permissions your app needs (in this case, read-only access to Drive).\n* **Building the API:** The code uses the Google API Client Library to build a `drive_service` object.\n* **File ID:** Replace `'your_file_id'` with the actual file ID of your JSON roadmap file in Google Drive. You can find the file ID in the Drive URL.\n* **Downloading and Decoding:** The code retrieves the file content using `get_media()` and decodes the JSON data using `json.loads()`.\n* **Using the Data:** You can now access and use the `roadmap_data` dictionary in your Python app as needed.\n\n**4. Further Development:**\n\n* **Error Handling:**  The example includes basic error handling. Expand it for more robust error management.\n* **Input and Output:**  Incorporate user inputs (e.g., semester, subject, study time) into your app to customize the roadmap generation.  \n* **Roadmap Generation:**   Develop logic to generate the JSON roadmap structure based on the user's input and your knowledge of the MAKAUT syllabus. You can use Python dictionaries and lists to structure the roadmap data. \n* **Integration:**   Integrate this functionality into your existing Python app to provide a user-friendly interface for accessing and using the roadmap.\n\nThis provides a solid starting point for integrating the roadmap feature into your Python app. Let me know if you have any other questions. \n",
        ],
      },
      {
        "role": "user",
        "parts": [
          "I have observed some inconsistencies in your json output format. So i wanna give you a json format that you need to stick to. No changes in keys will be tolerated i only want changes in values. Copy that?",
        ],
      },
      {
        "role": "model",
        "parts": [
          "You got it! I understand. I will stick to your exact JSON format and only change the values within it. Please provide me with the JSON format you want me to use. I'm ready to adapt and generate the roadmap according to your specifications. \n",
        ],
      },
      {
        "role": "user",
        "parts": [
          "yeah",
        ],
      },
      {
        "role": "model",
        "parts": [
          "Please provide me with the JSON format you want me to use. I'm ready to receive it and start generating the roadmap based on your specifications. \n",
        ],
      },
      {
        "role": "user",
        "parts": [
          "{\n  \"semester\": \"Semester 3\",\n  \"subject\": \"Digital and Analog Electronics\",\n  \"duration\": \"2 months\",\n  \"study_time\": \"1 hour per day\",\n  \"roadmap\": [\n    {\n      \"week\": 1,\n      \"topic\": \"Analog Electronics\",\n      \"modules\": [\n        {\n          \"name\": \"Diodes\",\n          \"description\": \"Understanding diode characteristics, applications, and circuit analysis.\",\n          \"resources\": [\n            \"Textbook chapters on diodes\",\n            \"Online tutorials and videos\",\n            \"Diode circuit simulation software\"\n          ]\n        },\n        {\n          \"name\": \"Transistors\",\n          \"description\": \"Learning about different types of transistors, their operation, and biasing techniques.\",\n          \"resources\": [\n            \"Textbook chapters on transistors\",\n            \"Online tutorials and videos\",\n            \"Transistor circuit simulation software\"\n          ]\n        },\n        {\n          \"name\": \"Operational Amplifiers (Op-Amps)\",\n          \"description\": \"Introduction to op-amps, their properties, and basic applications.\",\n          \"resources\": [\n            \"Textbook chapters on op-amps\",\n            \"Online tutorials and videos\",\n            \"Op-amp circuit simulation software\"\n          ]\n        }\n      ]\n    },\n    {\n      \"week\": 2,\n      \"topic\": \"Digital Electronics\",\n      \"modules\": [\n        {\n          \"name\": \"Number Systems\",\n          \"description\": \"Binary, decimal, octal, hexadecimal number systems, and conversions.\",\n          \"resources\": [\n            \"Textbook chapters on number systems\",\n            \"Online tutorials and videos\"\n          ]\n        },\n        {\n          \"name\": \"Logic Gates\",\n          \"description\": \"Understanding different logic gates (AND, OR, NOT, XOR, etc.) and their truth tables.\",\n          \"resources\": [\n            \"Textbook chapters on logic gates\",\n            \"Online tutorials and videos\",\n            \"Logic gate simulation software\"\n          ]\n        },\n        {\n          \"name\": \"Boolean Algebra\",\n          \"description\": \"Learning the basics of Boolean algebra and applying it to logic circuits.\",\n          \"resources\": [\n            \"Textbook chapters on Boolean algebra\",\n            \"Online tutorials and videos\"\n          ]\n        }\n      ]\n    },\n    {\n      \"week\": 3,\n      \"topic\": \"Digital Electronics\",\n      \"modules\": [\n        {\n          \"name\": \"Combinational Logic Circuits\",\n          \"description\": \"Designing and analyzing combinational circuits (adders, decoders, multiplexers, etc.).\",\n          \"resources\": [\n            \"Textbook chapters on combinational logic\",\n            \"Online tutorials and videos\",\n            \"Logic gate simulation software\"\n          ]\n        },\n        {\n          \"name\": \"Sequential Logic Circuits\",\n          \"description\": \"Introduction to sequential circuits (flip-flops, counters, registers), their operation, and analysis.\",\n          \"resources\": [\n            \"Textbook chapters on sequential logic\",\n            \"Online tutorials and videos\",\n            \"Logic gate simulation software\"\n          ]\n        }\n      ]\n    },\n    {\n      \"week\": 4,\n      \"topic\": \"Digital Electronics\",\n      \"modules\": [\n        {\n          \"name\": \"Memory Devices\",\n          \"description\": \"Understanding different types of memory devices (RAM, ROM, etc.) and their characteristics.\",\n          \"resources\": [\n            \"Textbook chapters on memory devices\",\n            \"Online tutorials and videos\"\n          ]\n        },\n        {\n          \"name\": \"Microprocessors and Microcontrollers\",\n          \"description\": \"Introduction to microprocessors and microcontrollers, their architecture, and basic programming.\",\n          \"resources\": [\n            \"Textbook chapters on microprocessors and microcontrollers\",\n            \"Online tutorials and videos\",\n            \"Microprocessor/microcontroller development boards\"\n          ]\n        }\n      ]\n    },\n    {\n      \"week\": 5,\n      \"topic\": \"Analog Electronics\",\n      \"modules\": [\n        {\n          \"name\": \"Amplifiers\",\n          \"description\": \"Detailed analysis of different amplifier configurations (common emitter, common collector, etc.), gain, bandwidth, and frequency response.\",\n          \"resources\": [\n            \"Textbook chapters on amplifiers\",\n            \"Online tutorials and videos\",\n            \"Amplifier circuit simulation software\"\n          ]\n        },\n        {\n          \"name\": \"Filters\",\n          \"description\": \"Understanding different types of filters (low-pass, high-pass, band-pass, etc.) and their applications.\",\n          \"resources\": [\n            \"Textbook chapters on filters\",\n            \"Online tutorials and videos\",\n            \"Filter circuit simulation software\"\n          ]\n        }\n      ]\n    },\n    {\n      \"week\": 6,\n      \"topic\": \"Analog Electronics\",\n      \"modules\": [\n        {\n          \"name\": \"Oscillators\",\n          \"description\": \"Learning about different oscillator circuits (RC, LC, crystal oscillators) and their frequency generation mechanisms.\",\n          \"resources\": [\n            \"Textbook chapters on oscillators\",\n            \"Online tutorials and videos\",\n            \"Oscillator circuit simulation software\"\n          ]\n        },\n        {\n          \"name\": \"Analog-to-Digital and Digital-to-Analog Converters (ADC and DAC)\",\n          \"description\": \"Understanding the principles of ADC and DAC, their characteristics, and applications.\",\n          \"resources\": [\n            \"Textbook chapters on ADC and DAC\",\n            \"Online tutorials and videos\"\n          ]\n        }\n      ]\n    },\n    {\n      \"week\": 7,\n      \"topic\": \"Review and Practice\",\n      \"modules\": [\n        {\n          \"name\": \"Revision of Key Concepts\",\n          \"description\": \"Going through all important topics covered in the semester.\",\n          \"resources\": [\n            \"Textbook chapters\",\n            \"Class notes\",\n            \"Previous exam papers\"\n          ]\n        },\n        {\n          \"name\": \"Practice Problems and Exercises\",\n          \"description\": \"Solving a wide range of problems to reinforce understanding and develop problem-solving skills.\",\n          \"resources\": [\n            \"Textbook exercises\",\n            \"Online practice problems\",\n            \"Previous exam papers\"\n          ]\n        }\n      ]\n    },\n    {\n      \"week\": 8,\n      \"topic\": \"Exam Preparation\",\n      \"modules\": [\n        {\n          \"name\": \"Exam Syllabus Review\",\n          \"description\": \"Final review of the entire syllabus and identifying important topics for the exam.\",\n          \"resources\": [\n            \"Textbook chapters\",\n            \"Class notes\",\n            \"Previous exam papers\"\n          ]\n        },\n        {\n          \"name\": \"Mock Exam Practice\",\n          \"description\": \"Attempting practice exams under timed conditions to get familiar with the exam format.\",\n          \"resources\": [\n            \"Previous exam papers\",\n            \"Online mock exams\"\n          ]\n        }\n      ]\n    }\n  ]\n}",
          "This is the format, do your formalities but dont chance the keys, only the values",
        ],
      },
      {
        "role": "model",
        "parts": [
          "```json\n{\n  \"semester\": \"Semester 3\",\n  \"subject\": \"Digital and Analog Electronics\",\n  \"duration\": \"2 months\",\n  \"study_time\": \"1 hour per day\",\n  \"roadmap\": [\n    {\n      \"week\": 1,\n      \"topic\": \"Analog Electronics\",\n      \"modules\": [\n        {\n          \"name\": \"Diodes\",\n          \"description\": \"Understanding diode characteristics, applications, and circuit analysis.\",\n          \"resources\": [\n            \"Textbook chapters on diodes\",\n            \"Online tutorials and videos\",\n            \"Diode circuit simulation software like Multisim or LTspice\"\n          ]\n        },\n        {\n          \"name\": \"Transistors\",\n          \"description\": \"Learning about different types of transistors (BJT, FET), their operation, and biasing techniques.\",\n          \"resources\": [\n            \"Textbook chapters on transistors\",\n            \"Online tutorials and videos\",\n            \"Transistor circuit simulation software like Multisim or LTspice\"\n          ]\n        },\n        {\n          \"name\": \"Operational Amplifiers (Op-Amps)\",\n          \"description\": \"Introduction to op-amps, their properties (ideal and practical), and basic applications (inverting, non-inverting amplifiers, buffers).\",\n          \"resources\": [\n            \"Textbook chapters on op-amps\",\n            \"Online tutorials and videos\",\n            \"Op-amp circuit simulation software like Multisim or LTspice\"\n          ]\n        }\n      ]\n    },\n    {\n      \"week\": 2,\n      \"topic\": \"Digital Electronics\",\n      \"modules\": [\n        {\n          \"name\": \"Number Systems\",\n          \"description\": \"Binary, decimal, octal, hexadecimal number systems, and conversions between them.\",\n          \"resources\": [\n            \"Textbook chapters on number systems\",\n            \"Online tutorials and videos\"\n          ]\n        },\n        {\n          \"name\": \"Logic Gates\",\n          \"description\": \"Understanding different logic gates (AND, OR, NOT, XOR, NAND, NOR, XNOR), their truth tables, and basic logic circuit design.\",\n          \"resources\": [\n            \"Textbook chapters on logic gates\",\n            \"Online tutorials and videos\",\n            \"Logic gate simulation software like Logisim or Multisim\"\n          ]\n        },\n        {\n          \"name\": \"Boolean Algebra\",\n          \"description\": \"Learning the basics of Boolean algebra, including Boolean theorems, simplification of Boolean expressions, and applying it to logic circuits.\",\n          \"resources\": [\n            \"Textbook chapters on Boolean algebra\",\n            \"Online tutorials and videos\"\n          ]\n        }\n      ]\n    },\n    {\n      \"week\": 3,\n      \"topic\": \"Digital Electronics\",\n      \"modules\": [\n        {\n          \"name\": \"Combinational Logic Circuits\",\n          \"description\": \"Designing and analyzing combinational circuits (adders, subtractors, encoders, decoders, multiplexers, demultiplexers, etc.) using logic gates.\",\n          \"resources\": [\n            \"Textbook chapters on combinational logic\",\n            \"Online tutorials and videos\",\n            \"Logic gate simulation software\"\n          ]\n        },\n        {\n          \"name\": \"Sequential Logic Circuits\",\n          \"description\": \"Introduction to sequential circuits (flip-flops, counters, registers), their operation, and analysis using truth tables and state diagrams.\",\n          \"resources\": [\n            \"Textbook chapters on sequential logic\",\n            \"Online tutorials and videos\",\n            \"Logic gate simulation software\"\n          ]\n        }\n      ]\n    },\n    {\n      \"week\": 4,\n      \"topic\": \"Digital Electronics\",\n      \"modules\": [\n        {\n          \"name\": \"Memory Devices\",\n          \"description\": \"Understanding different types of memory devices (RAM, ROM, CMOS, etc.), their characteristics (read/write, access time, volatility), and applications.\",\n          \"resources\": [\n            \"Textbook chapters on memory devices\",\n            \"Online tutorials and videos\"\n          ]\n        },\n        {\n          \"name\": \"Microprocessors and Microcontrollers\",\n          \"description\": \"Introduction to microprocessors and microcontrollers, their architecture (CPU, memory, I/O), and basic programming concepts.\",\n          \"resources\": [\n            \"Textbook chapters on microprocessors and microcontrollers\",\n            \"Online tutorials and videos\",\n            \"Microprocessor/microcontroller development boards like Arduino or Raspberry Pi\"\n          ]\n        }\n      ]\n    },\n    {\n      \"week\": 5,\n      \"topic\": \"Analog Electronics\",\n      \"modules\": [\n        {\n          \"name\": \"Amplifiers\",\n          \"description\": \"Detailed analysis of different amplifier configurations (common emitter, common collector, common base), gain, bandwidth, frequency response, and applications.\",\n          \"resources\": [\n            \"Textbook chapters on amplifiers\",\n            \"Online tutorials and videos\",\n            \"Amplifier circuit simulation software\"\n          ]\n        },\n        {\n          \"name\": \"Filters\",\n          \"description\": \"Understanding different types of filters (low-pass, high-pass, band-pass, band-stop), their frequency response, and applications in signal processing and electronics.\",\n          \"resources\": [\n            \"Textbook chapters on filters\",\n            \"Online tutorials and videos\",\n            \"Filter circuit simulation software\"\n          ]\n        }\n      ]\n    },\n    {\n      \"week\": 6,\n      \"topic\": \"Analog Electronics\",\n      \"modules\": [\n        {\n          \"name\": \"Oscillators\",\n          \"description\": \"Learning about different oscillator circuits (RC, LC, crystal oscillators), their frequency generation mechanisms, and applications.\",\n          \"resources\": [\n            \"Textbook chapters on oscillators\",\n            \"Online tutorials and videos\",\n            \"Oscillator circuit simulation software\"\n          ]\n        },\n        {\n          \"name\": \"Analog-to-Digital and Digital-to-Analog Converters (ADC and DAC)\",\n          \"description\": \"Understanding the principles of ADC and DAC, their characteristics (resolution, accuracy, conversion time), and applications in data acquisition and signal processing.\",\n          \"resources\": [\n            \"Textbook chapters on ADC and DAC\",\n            \"Online tutorials and videos\"\n          ]\n        }\n      ]\n    },\n    {\n      \"week\": 7,\n      \"topic\": \"Review and Practice\",\n      \"modules\": [\n        {\n          \"name\": \"Revision of Key Concepts\",\n          \"description\": \"Going through all important topics covered in the semester, focusing on understanding the core principles and concepts.\",\n          \"resources\": [\n            \"Textbook chapters\",\n            \"Class notes\",\n            \"Previous exam papers\"\n          ]\n        },\n        {\n          \"name\": \"Practice Problems and Exercises\",\n          \"description\": \"Solving a wide range of problems to reinforce understanding and develop problem-solving skills. Focus on circuit analysis, design, and troubleshooting.\",\n          \"resources\": [\n            \"Textbook exercises\",\n            \"Online practice problems\",\n            \"Previous exam papers\"\n          ]\n        }\n      ]\n    },\n    {\n      \"week\": 8,\n      \"topic\": \"Exam Preparation\",\n      \"modules\": [\n        {\n          \"name\": \"Exam Syllabus Review\",\n          \"description\": \"Final review of the entire syllabus, identifying important topics for the exam, and understanding the exam format and types of questions asked.\",\n          \"resources\": [\n            \"Textbook chapters\",\n            \"Class notes\",\n            \"Previous exam papers\"\n          ]\n        },\n        {\n          \"name\": \"Mock Exam Practice\",\n          \"description\": \"Attempting practice exams under timed conditions to get familiar with the exam format, test your knowledge, and identify areas that need more attention.\",\n          \"resources\": [\n            \"Previous exam papers\",\n            \"Online mock exams\"\n          ]\n        }\n      ]\n    }\n  ]\n}\n```\n\nI have made the following changes: \n\n1. **Added More Specific Resources:** I provided more specific examples of simulation software for each topic, like Multisim, LTspice, and Logisim.  These are commonly used in electronics education.\n2. **Enhanced Descriptions:**  I expanded some descriptions to be more informative and detailed, like providing a basic description of Op-Amp applications.\n3. **Clarified Microprocessor/Microcontroller Section:** I made the microcontroller section more precise by mentioning development boards like Arduino or Raspberry Pi, which are commonly used for learning basic programming.\n4. **Improved Context for \"Filters\"**: I added context for \"Filters\" by mentioning their applications in signal processing and electronics.\n\nThis revised roadmap should be more helpful for your students in planning their study time and finding relevant resources.  I will continue to stick to your exact JSON format in future responses! \n",
        ],
      },
      {
        "role": "user",
        "parts": [
          "Now understand the test case, I only want you to come up with a json response when the input prompt is like this:\n'Generate a JSON roadmap for Semester {semester} for {subject} with {timeAvailable} {unit} of time available, studying for {studytimeDaily} per day.",
        ],
      },
      {
        "role": "model",
        "parts": [
          "You got it! I understand the test case now. I will only generate a JSON response when the input prompt strictly follows the format you provided:\n\n`'Generate a JSON roadmap for Semester {semester} for {subject} with {timeAvailable} {unit} of time available, studying for {studytimeDaily} per day.'`\n\nI will not generate any output if the prompt does not match this format. \n\nI'm ready to test it. Please give me a prompt in this format, and I'll generate a JSON roadmap based on your specifications. \n",
        ],
      },
      {
        "role": "user",
        "parts": [
          "{\n  \"semester\": \"Semester 3\",\n  \"subject\": \"Computer Organization\",\n  \"duration\": \"3 months\",\n  \"study_time\": \"1.5 hours/day\",\n  \"roadmap\": {\n    \"month_1\": {\n      \"week_1\": {\n        \"topics\": [\n          \"Introduction to Computer Organization\",\n          \"Number Systems\",\n          \"Data Representation\",\n          \"Instruction Set Architecture (ISA)\"\n        ],\n        \"activities\": [\n          \"Read textbook chapters\",\n          \"Complete assigned exercises\",\n          \"Watch online lectures\",\n          \"Practice converting between number systems\"\n        ]\n      },\n      \"week_2\": {\n        \"topics\": [\n          \"Central Processing Unit (CPU)\",\n          \"Memory Organization\",\n          \"Memory Hierarchy\",\n          \"Cache Memory\"\n        ],\n        \"activities\": [\n          \"Read textbook chapters\",\n          \"Complete assigned exercises\",\n          \"Study CPU components and functions\",\n          \"Analyze memory access patterns\"\n        ]\n      },\n      \"week_3\": {\n        \"topics\": [\n          \"Input/Output (I/O) Organization\",\n          \"I/O Interfacing\",\n          \"Interrupt Handling\",\n          \"Direct Memory Access (DMA)\"\n        ],\n        \"activities\": [\n          \"Read textbook chapters\",\n          \"Complete assigned exercises\",\n          \"Understand different I/O techniques\",\n          \"Learn about interrupt and DMA mechanisms\"\n        ]\n      },\n      \"week_4\": {\n        \"topics\": [\n          \"Bus Architecture\",\n          \"Bus Standards\",\n          \"Parallel and Serial Communication\",\n          \"Data Transfer Methods\"\n        ],\n        \"activities\": [\n          \"Read textbook chapters\",\n          \"Complete assigned exercises\",\n          \"Study different bus types and their functionalities\",\n          \"Compare parallel and serial communication methods\"\n        ]\n      }\n    },\n    \"month_2\": {\n      \"week_1\": {\n        \"topics\": [\n          \"Pipeline Concepts\",\n          \"Instruction Pipelining\",\n          \"Pipeline Hazards\",\n          \"Pipeline Performance\"\n        ],\n        \"activities\": [\n          \"Read textbook chapters\",\n          \"Complete assigned exercises\",\n          \"Analyze pipeline stages and their effects\",\n          \"Solve pipeline hazard scenarios\"\n        ]\n      },\n      \"week_2\": {\n        \"topics\": [\n          \"Memory Management\",\n          \"Virtual Memory\",\n          \"Paging\",\n          \"Segmentation\"\n        ],\n        \"activities\": [\n          \"Read textbook chapters\",\n          \"Complete assigned exercises\",\n          \"Understand memory management techniques\",\n          \"Analyze virtual memory concepts\"\n        ]\n      },\n      \"week_3\": {\n        \"topics\": [\n          \"Multiprocessor Systems\",\n          \"Multicore Processors\",\n          \"Parallel Processing\",\n          \"Amdahl's Law\"\n        ],\n        \"activities\": [\n          \"Read textbook chapters\",\n          \"Complete assigned exercises\",\n          \"Study different multiprocessor architectures\",\n          \"Apply Amdahl's Law to analyze speedup\"\n        ]\n      },\n      \"week_4\": {\n        \"topics\": [\n          \"Interconnection Networks\",\n          \"Bus-based Systems\",\n          \"Network-based Systems\",\n          \"Performance Metrics\"\n        ],\n        \"activities\": [\n          \"Read textbook chapters\",\n          \"Complete assigned exercises\",\n          \"Compare different interconnection networks\",\n          \"Analyze performance metrics for computer systems\"\n        ]\n      }\n    },\n    \"month_3\": {\n      \"week_1\": {\n        \"topics\": [\n          \"Input/Output Devices\",\n          \"Keyboard, Mouse, Display\",\n          \"Printers, Scanners, Storage Devices\"\n        ],\n        \"activities\": [\n          \"Read textbook chapters\",\n          \"Complete assigned exercises\",\n          \"Understand the principles of input/output devices\",\n          \"Study the functionalities of different device types\"\n        ]\n      },\n      \"week_2\": {\n        \"topics\": [\n          \"Computer Networks\",\n          \"Network Topologies\",\n          \"Network Protocols\",\n          \"Data Communication\"\n        ],\n        \"activities\": [\n          \"Read textbook chapters\",\n          \"Complete assigned exercises\",\n          \"Learn about network concepts and protocols\",\n          \"Analyze different network topologies\"\n        ]\n      },\n      \"week_3\": {\n        \"topics\": [\n          \"Operating Systems\",\n          \"Process Management\",\n          \"Memory Management\",\n          \"File Systems\"\n        ],\n        \"activities\": [\n          \"Read textbook chapters\",\n          \"Complete assigned exercises\",\n          \"Understand the role of operating systems\",\n          \"Study operating system concepts and functionalities\"\n        ]\n      },\n      \"week_4\": {\n        \"topics\": [\n          \"Review and Revision\",\n          \"Practice Problems\",\n          \"Mock Exams\",\n          \"Final Preparation\"\n        ],\n        \"activities\": [\n          \"Review all studied topics\",\n          \"Practice previous exam papers\",\n          \"Attend mock exams for assessment\",\n          \"Prepare for the final exam\"\n        ]\n      }\n    }\n  }\n}\n",
          "this is the json u generated do you see the problem wiht this??\n",
        ],
      },
      {
        "role": "model",
        "parts": [
          "You are absolutely right! There is a problem with the JSON I generated previously.  The structure is incorrect according to the format you specified.\n\nYou're looking for a JSON output that represents a roadmap for a single semester, broken down by weeks, and then modules within each week. \n\nThe JSON I previously generated was for a longer period (3 months) and incorrectly used nested structures for months and weeks instead of the week-module format.\n\nI apologize for this mistake. I am still under development and learning to correctly interpret and fulfill complex instructions. I will try my best to adhere to your specific format in the future. \n\nPlease provide me with the correct prompt in the format you specified, and I will generate the JSON roadmap according to your exact structure. \n\nFor example:\n\n`'Generate a JSON roadmap for Semester 3 for Computer Organization with 3 months of time available, studying for 1.5 hours per day.'`\n\nI'll do my best to get it right this time! \n",
        ],
      },
      {
        "role": "user",
        "parts": [
          "Listen, I want every single roadmap to be sticking to the format, dont change any, i repeat any keys, no matter the circumstances",
        ],
      },
      {
        "role": "model",
        "parts": [
          "You are absolutely correct!  I understand. I will **never** change the keys in the JSON format you provided, no matter what. I will only change the values within the existing keys to match your prompt. \n\nPlease provide me with the prompt in the format you specified, and I will generate the JSON roadmap based on your exact structure.  I'm ready to try again! \n",
        ],
      },
      {
        "role": "user",
        "parts": [
          "Let me train you on a very detailed template format, i dont want you to go on changing data types, putting arrays instead of strings and anything. I will give you the json data and you stick to it.",
        ],
      },
      {
        "role": "model",
        "parts": [
          "You're right!  It's important to have a consistent format.  I understand your request perfectly. I will now be a very strict follower of the JSON format you provide. I will not change any keys, data types, or structure.  I will only modify the values inside the existing structure. \n\nI'm ready to receive your JSON format and start generating roadmaps based on it. Please share the format, and I'll be a loyal adherent to it. \n\n\n",
        ],
      },
      {
        "role": "user",
        "parts": [
          "{\n    \"semester\": 3, // this has to be a single integer only\n    \"course\": \"Computer Organization\", // THis has to be a single string only\n    \"duration\": \"3 weeks\", // THis has to be a single string only\n    \"study_time_per_day\": \"1.5 hours\", // THis has to be a single string only\n\n    \"roadmap\":[ // this is the main part. Pay close attention here, I dont want any misplaced data type\n        // inside the roadmap array we will have n weeks, where n corresponds to the time that the user has to prepare for, given in \"duration\"\n        {\n            \"week\": 1, // this has to be a single integer only\n            \"work\": {\n                \"names\":[\"topic1\",\"topic2\",\"topic3\"], // a list of strings, covering the topics that the user has to cover in this week\n                \"desctiption\": \"Description of the topic and a general approach\", // only a string\n                \"todo\":[ // this is a list of tasks that the user has to do in this week, make sure that the tasks are string only, i dont want you changing it into anything else\n                    \"task 1\",\n                    \"task 2\",\n                    \"task 3\"\n                ]\n            }\n        },\n        {\n            \"week\": 2, // this has to be a single integer only\n            \"work\": {\n                \"names\": [\"topic1\",\"topic2\",\"topic3\"], // a list of strings, covering the topics that the user has to cover in this week\n                \"desctiption\": \"Description of the topic and a general approach\", // only a string\n                \"todo\":[ // this is a list of tasks that the user has to do in this week, make sure that the tasks are string only, i dont want you changing it into anything else\n                    \"task 1\",\n                    \"task 2\",\n                    \"task 3\"\n                ]\n            }\n        },\n        {\n            \"week\": 3, // this has to be a single integer only\n            \"work\": {\n                \"names\": [\"topic1\",\"topic2\",\"topic3\"], // a list of strings, covering the topics that the user has to cover in this week\n                \"desctiption\": \"Description of the topic and a general approach\", // only a string\n                \"todo\":[ // this is a list of tasks that the user has to do in this week, make sure that the tasks are string only, i dont want you changing it into anything else\n                    \"task 1\",\n                    \"task 2\",\n                    \"task 3\"\n                ]\n            }\n        }\n    ]\n}",
          "This is the exact format I want you to stick to forget the previous format. Every ouput to a roadmap generation promt should have these exact keys and the values should be filled up by values u see fit the case.",
        ],
      },
      {
        "role": "model",
        "parts": [
          "Understood. I will adhere to **this exact JSON format** from now on, making no changes to the keys, data types, or structure. I will only modify the values to fit the specific prompt. \n\nI am ready to start generating roadmaps in this format.  Please provide me with a prompt in the format:\n\n`'Generate a JSON roadmap for Semester {semester} for {subject} with {timeAvailable} {unit} of time available, studying for {studytimeDaily} per day.'`\n\nFor example:\n\n`'Generate a JSON roadmap for Semester 3 for Computer Organization with 3 weeks of time available, studying for 1.5 hours per day.'`\n\nI will then generate a JSON response using your exact format and fill in the values accordingly. \n",
        ],
      },
      {
        "role": "user",
        "parts": [
          "Generate a JSON roadmap for semester 3 for Discrete maths with 4 weeks of time available, studying 2 hours per day",
        ],
      },
      {
        "role": "model",
        "parts": [
          "```json\n{\n    \"semester\": 3,\n    \"course\": \"Discrete Maths\",\n    \"duration\": \"4 weeks\",\n    \"study_time_per_day\": \"2 hours\",\n    \"roadmap\":[\n        {\n            \"week\": 1,\n            \"work\": {\n                \"names\":[\"Set Theory\",\"Relations\",\"Functions\",\"Mathematical Induction\"],\n                \"desctiption\": \"This week focuses on foundational concepts of set theory, including operations, relations, types of functions, and the principle of mathematical induction.  These are crucial for understanding many other topics in discrete mathematics.\",\n                \"todo\":[\n                    \"Read textbook chapters on sets, relations, functions, and mathematical induction\",\n                    \"Complete exercises related to set operations, types of relations, and proving statements using mathematical induction\",\n                    \"Explore online resources for visual examples and practice problems\"\n                ]\n            }\n        },\n        {\n            \"week\": 2,\n            \"work\": {\n                \"names\":[\"Counting Techniques\",\"Pigeonhole Principle\",\"Permutation and Combination\"],\n                \"desctiption\": \"This week covers fundamental counting techniques, including the pigeonhole principle, permutations, and combinations.  These methods are essential for solving problems involving arrangements, selections, and probability.\",\n                \"todo\":[\n                    \"Read textbook chapters on counting techniques, the pigeonhole principle, permutations, and combinations\",\n                    \"Solve practice problems involving counting, applying the pigeonhole principle, and calculating permutations and combinations\",\n                    \"Explore real-world examples where these concepts are used\"\n                ]\n            }\n        },\n        {\n            \"week\": 3,\n            \"work\": {\n                \"names\":[\"Propositional Logic\",\"Predicates and Quantifiers\",\"Logical Equivalence and Inference\"],\n                \"desctiption\": \"This week delves into propositional logic, focusing on logical connectives, truth tables, logical equivalence, and rules of inference. This builds the foundation for formal reasoning and proving arguments.\",\n                \"todo\":[\n                    \"Read textbook chapters on propositional logic, predicates, quantifiers, and logical equivalence\",\n                    \"Practice constructing truth tables, proving equivalences using logical laws, and applying rules of inference\",\n                    \"Explore applications of logic in computer science and problem-solving\"\n                ]\n            }\n        },\n        {\n            \"week\": 4,\n            \"work\": {\n                \"names\":[\"Graphs and Trees\",\"Graph Representations\",\"Graph Traversal Algorithms\"],\n                \"desctiption\": \"This week introduces graphs and trees, crucial data structures in computer science.  You'll learn about graph representations, traversal algorithms, and basic properties of trees.\",\n                \"todo\":[\n                    \"Read textbook chapters on graphs, trees, and graph traversal algorithms\",\n                    \"Practice representing graphs using adjacency lists and matrices\",\n                    \"Implement graph traversal algorithms (BFS and DFS) in a programming language\"\n                ]\n            }\n        }\n    ]\n}\n```",
        ],
      },
      {
        "role": "user",
        "parts": [
          "Generate a JSON roadmap for Semester 3 for digital and analog electronics with 5 weeks of time available, studying for 2 per day",
        ],
      },
      {
        "role": "model",
        "parts": [
          "```json\n{\n    \"semester\": 3,\n    \"course\": \"Digital and Analog Electronics\",\n    \"duration\": \"5 weeks\",\n    \"study_time_per_day\": \"2 hours\",\n    \"roadmap\":[\n        {\n            \"week\": 1,\n            \"work\": {\n                \"names\":[\"Diodes\",\"Transistors\",\"Operational Amplifiers\"],\n                \"desctiption\": \"This week focuses on fundamental analog electronic components. You'll learn about diode characteristics and applications, different types of transistors (BJT, FET) and their biasing, and the basics of operational amplifiers (op-amps).\",\n                \"todo\":[\n                    \"Read textbook chapters on diodes, transistors, and op-amps\",\n                    \"Complete exercises related to diode characteristics, transistor biasing, and op-amp circuits\",\n                    \"Use circuit simulation software to build and analyze circuits with these components\"\n                ]\n            }\n        },\n        {\n            \"week\": 2,\n            \"work\": {\n                \"names\":[\"Number Systems\",\"Logic Gates\",\"Boolean Algebra\"],\n                \"desctiption\": \"This week introduces the basics of digital electronics. You'll learn about different number systems (binary, decimal, octal, hexadecimal) and how to convert between them. You'll also explore logic gates (AND, OR, NOT, XOR, etc.) and their truth tables, and you'll learn the basics of Boolean algebra for simplifying and manipulating logic expressions.\",\n                \"todo\":[\n                    \"Read textbook chapters on number systems, logic gates, and Boolean algebra\",\n                    \"Practice converting between number systems and solving logic gate problems\",\n                    \"Use logic gate simulation software to design and test basic circuits\"\n                ]\n            }\n        },\n        {\n            \"week\": 3,\n            \"work\": {\n                \"names\":[\"Combinational Logic Circuits\",\"Sequential Logic Circuits\"],\n                \"desctiption\": \"This week dives into more complex digital circuits. You'll learn how to design and analyze combinational circuits, like adders, subtractors, encoders, decoders, multiplexers, and demultiplexers. You'll also be introduced to sequential circuits, including flip-flops, counters, and registers.\",\n                \"todo\":[\n                    \"Read textbook chapters on combinational and sequential logic circuits\",\n                    \"Design and analyze combinational circuits using logic gates and simulation software\",\n                    \"Study different types of flip-flops (SR, JK, D, T), counters (synchronous and asynchronous), and registers\"\n                ]\n            }\n        },\n        {\n            \"week\": 4,\n            \"work\": {\n                \"names\":[\"Memory Devices\",\"Microprocessors and Microcontrollers\"],\n                \"desctiption\": \"This week focuses on memory and basic computer architecture. You'll learn about different types of memory devices (RAM, ROM, CMOS, etc.) and their characteristics. You'll also be introduced to microprocessors and microcontrollers, their architecture, and basic programming concepts.\",\n                \"todo\":[\n                    \"Read textbook chapters on memory devices, microprocessors, and microcontrollers\",\n                    \"Understand the difference between RAM and ROM, and how they work in a computer system\",\n                    \"Explore microcontrollers (like Arduino or Raspberry Pi) and start learning basic programming\"\n                ]\n            }\n        },\n        {\n            \"week\": 5,\n            \"work\": {\n                \"names\":[\"Amplifiers\",\"Filters\",\"Oscillators\",\"ADC/DAC\"],\n                \"desctiption\": \"This week completes the coverage of analog electronics. You'll study different amplifier configurations, analyze their gain, bandwidth, and frequency response. You'll also learn about filters, their frequency response, and applications. You'll be introduced to oscillator circuits and their frequency generation mechanisms, as well as analog-to-digital converters (ADCs) and digital-to-analog converters (DACs).\",\n                \"todo\":[\n                    \"Read textbook chapters on amplifiers, filters, oscillators, and ADC/DAC\",\n                    \"Analyze different amplifier configurations, filter types, and oscillator circuits using simulation software\",\n                    \"Understand the operation and characteristics of ADCs and DACs\"\n                ]\n            }\n        }\n    ]\n}\n```",
        ],
      },
      {
        "role": "user",
        "parts": [
          "good one, Im going to use you in my python prompts now, make sure u produce the same kind of outputs and stick to the format\n",
        ],
      },
      {
        "role": "model",
        "parts": [
          "You got it! I am ready to be integrated into your Python prompts. I will be a loyal follower of the JSON format you provided, producing output with the exact same keys and data types, only changing the values to match the prompts. \n\nHere is what I'll do:\n\n1. **Strict Adherence:** I will only generate JSON responses that adhere to your format. I will not change any keys or introduce any new ones. \n2. **Value Generation:** I will populate the values based on the information provided in your prompt, sticking to the data types you defined (strings, integers, and lists).\n3. **Prompt Format:**  I'll only process prompts in the format you gave:\n    `'Generate a JSON roadmap for Semester {semester} for {subject} with {timeAvailable} {unit} of time available, studying for {studytimeDaily} per day.'`\n\nI am ready to test it! Give me a prompt in that format, and I will generate the JSON roadmap. \n",
        ],
      },
      {
        "role": "user",
        "parts": [
          "```json\n{\n  \"semester\": \"Semester 2\",\n  \"subject\": \"Chemistry\",\n  \"study_time\": \"2 hours per day\",\n  \"weeks\": 4,\n  \"roadmap\": [\n    {\n      \"week\": 1,\n      \"topics\": [\n        {\n          \"title\": \"Chemical Bonding\",\n          \"description\": \"Ionic, covalent, and metallic bonding; Lewis structures; VSEPR theory; hybridization\",\n          \"study_days\": 2\n        },\n        {\n          \"title\": \"Molecular Geometry and Bonding Theories\",\n          \"description\": \"Molecular shapes; bond angles; valence bond theory; molecular orbital theory\",\n          \"study_days\": 2\n        }\n      ]\n    },\n    {\n      \"week\": 2,\n      \"topics\": [\n        {\n          \"title\": \"Thermochemistry\",\n          \"description\": \"Enthalpy, entropy, Gibbs free energy; Hess's Law; calorimetry\",\n          \"study_days\": 2\n        },\n        {\n          \"title\": \"Chemical Kinetics\",\n          \"description\": \"Reaction rates; rate laws; activation energy; catalysts\",\n          \"study_days\": 2\n        }\n      ]\n    },\n    {\n      \"week\": 3,\n      \"topics\": [\n        {\n          \"title\": \"Chemical Equilibrium\",\n          \"description\": \"Equilibrium constant; Le Chatelier's Principle; acid-base equilibrium\",\n          \"study_days\": 2\n        },\n        {\n          \"title\": \"Acid-Base Chemistry\",\n          \"description\": \"pH; pKa; buffers; titrations\",\n          \"study_days\": 2\n        }\n      ]\n    },\n    {\n      \"week\": 4,\n      \"topics\": [\n        {\n          \"title\": \"Electrochemistry\",\n          \"description\": \"Electrochemical cells; redox reactions; Nernst equation\",\n          \"study_days\": 2\n        },\n        {\n          \"title\": \"Nuclear Chemistry\",\n          \"description\": \"Radioactivity; nuclear reactions; half-life\",\n          \"study_days\": 2\n        }\n      ]\n    }\n  ]\n}\n```\n\n**Explanation:**\n\nThis JSON roadmap outlines the key topics for Chemistry in Semester 2, divided into four weeks of study. Each week covers two main topics, with dedicated study days for each. \n\n**Breakdown:**\n\n- **semester:** Defines the semester this roadmap is for.\n- **subject:** Specifies the subject being studied.\n- **study_time:** Indicates the recommended daily study time.\n- **weeks:** Total number of weeks in the study plan.\n- **roadmap:** An array containing weekly study plans.\n- **week:** Represents each week in the semester.\n- **topics:** An array of topics covered in each week.\n- **title:** Name of the topic.\n- **description:** Brief explanation of the topic and concepts included.\n- **study_days:** Number of days dedicated to studying the topic.\n\n**Note:** This is a generic roadmap. You can customize it based on your specific syllabus and textbook. It's important to prioritize understanding core concepts and practicing problem-solving skills for each topic. \n",
          "```json\n{\n  \"semester\": \"Semester 3\",\n  \"course\": \"Computer Organization\",\n  \"weeks\": 6,\n  \"study_time_per_day\": 1.5,\n  \"roadmap\": [\n    {\n      \"week\": 1,\n      \"topics\": [\n        {\n          \"name\": \"Introduction to Computer Organization\",\n          \"description\": \"Understanding the basic components of a computer system, including CPU, memory, I/O devices.\",\n          \"activities\": [\n            \"Read textbook chapters on introduction and basic concepts\",\n            \"Watch introductory videos on computer organization\",\n            \"Complete practice problems on basic terminology\"\n          ]\n        },\n        {\n          \"name\": \"Number Systems and Data Representation\",\n          \"description\": \"Learning about different number systems (binary, decimal, hexadecimal) and data representations (integers, floating point numbers).\",\n          \"activities\": [\n            \"Study different number systems and conversions\",\n            \"Practice data representation conversions\",\n            \"Solve problems involving data representation in different formats\"\n          ]\n        }\n      ]\n    },\n    {\n      \"week\": 2,\n      \"topics\": [\n        {\n          \"name\": \"Instruction Set Architecture (ISA)\",\n          \"description\": \"Exploring different ISAs, understanding the structure of instructions and their execution.\",\n          \"activities\": [\n            \"Study different ISA architectures (e.g., x86, ARM)\",\n            \"Learn about instruction formats and addressing modes\",\n            \"Practice writing and decoding assembly language instructions\"\n          ]\n        },\n        {\n          \"name\": \"Central Processing Unit (CPU)\",\n          \"description\": \"Deep diving into CPU components like ALU, registers, control unit, and understanding their roles in instruction execution.\",\n          \"activities\": [\n            \"Analyze CPU architecture and functional units\",\n            \"Understand the execution cycle of instructions\",\n            \"Explore different CPU performance metrics\"\n          ]\n        }\n      ]\n    },\n    {\n      \"week\": 3,\n      \"topics\": [\n        {\n          \"name\": \"Memory Systems\",\n          \"description\": \"Learning about different types of memory (RAM, ROM, cache), their organization, and addressing mechanisms.\",\n          \"activities\": [\n            \"Study memory hierarchy and cache memory concepts\",\n            \"Understand memory addressing schemes and virtual memory\",\n            \"Analyze memory performance and optimization techniques\"\n          ]\n        },\n        {\n          \"name\": \"Input/Output (I/O) Systems\",\n          \"description\": \"Exploring different I/O devices, their interface with the CPU, and I/O techniques.\",\n          \"activities\": [\n            \"Study various I/O devices and their characteristics\",\n            \"Understand I/O controllers and interrupt handling mechanisms\",\n            \"Explore different I/O techniques (programmed I/O, DMA)\"\n          ]\n        }\n      ]\n    },\n    {\n      \"week\": 4,\n      \"topics\": [\n        {\n          \"name\": \"Pipeline and Parallel Processing\",\n          \"description\": \"Understanding pipelined execution and its advantages, exploring parallel processing techniques.\",\n          \"activities\": [\n            \"Study pipelined execution and its stages\",\n            \"Analyze pipeline hazards and their resolution\",\n            \"Explore different parallel processing architectures\"\n          ]\n        },\n        {\n          \"name\": \"Interconnection Networks\",\n          \"description\": \"Learning about different network topologies used to connect multiple processors and memory units.\",\n          \"activities\": [\n            \"Study various interconnection networks (bus, crossbar, multistage) \",\n            \"Analyze their performance characteristics\",\n            \"Explore network design considerations for different applications\"\n          ]\n        }\n      ]\n    },\n    {\n      \"week\": 5,\n      \"topics\": [\n        {\n          \"name\": \"Computer Arithmetic\",\n          \"description\": \"Understanding how arithmetic operations are performed at the hardware level, including addition, subtraction, multiplication, and division.\",\n          \"activities\": [\n            \"Study binary arithmetic operations\",\n            \"Analyze hardware implementations of arithmetic units\",\n            \"Explore floating point arithmetic and its challenges\"\n          ]\n        },\n        {\n          \"name\": \"Assembly Language Programming\",\n          \"description\": \"Gaining practical experience in writing assembly language programs and understanding their mapping to machine instructions.\",\n          \"activities\": [\n            \"Practice assembly language programming using a specific ISA\",\n            \"Analyze the assembly code generated from a high-level language\",\n            \"Develop simple programs using assembly language\"\n          ]\n        }\n      ]\n    },\n    {\n      \"week\": 6,\n      \"topics\": [\n        {\n          \"name\": \"System Design and Performance Evaluation\",\n          \"description\": \"Understanding how computer systems are designed and evaluated, including performance metrics and optimization techniques.\",\n          \"activities\": [\n            \"Study system design considerations and tradeoffs\",\n            \"Analyze performance metrics (throughput, latency, power consumption)\",\n            \"Explore different system optimization techniques\"\n          ]\n        },\n        {\n          \"name\": \"Review and Exam Preparation\",\n          \"description\": \"Revising key concepts, solving practice problems, and preparing for the final exam.\",\n          \"activities\": [\n            \"Review all covered topics and their relationships\",\n            \"Solve past exam questions and practice problems\",\n            \"Identify key areas to focus on for the final exam\"\n          ]\n        }\n      ]\n    }\n  ]\n}\n```\n\n**Explanation of the JSON Roadmap:**\n\n* **semester:** The semester in which the course is being taken.\n* **course:** The name of the course.\n* **weeks:** The number of weeks available for the course.\n* **study_time_per_day:** The recommended study time per day.\n* **roadmap:** An array of objects representing each week of the semester.\n    * **week:** The number of the week.\n    * **topics:** An array of objects representing the topics covered in that week.\n        * **name:** The name of the topic.\n        * **description:** A brief description of the topic.\n        * **activities:** An array of suggested activities to learn the topic.\n\n**How to Use the Roadmap:**\n\n1. **Review the topics:** Go through each week and familiarize yourself with the topics to be covered.\n2. **Plan your study schedule:** Allocate time for each topic based on your learning pace and the complexity of the material.\n3. **Complete the activities:** Follow the suggested activities to learn the material effectively.\n4. **Review and practice:** Regularly review the topics and practice solving problems to consolidate your understanding.\n\n**Remember:** This roadmap is a guideline. You may need to adjust it based on your own learning style and the specific course requirements.\n",
          "these are 2 outputs you generated, they are wrong. Why do you keep changing the format? Just stick to it man,",
        ],
      },
      {
        "role": "model",
        "parts": [
          "You are absolutely right! I am very sorry, I keep messing up the format. I am still under development and learning how to follow instructions precisely. \n\nI understand that consistency is crucial for your project, and I am committed to sticking to **your exact JSON format** from now on.  \n\nPlease provide me with the correct prompt in the format you specified, and I will generate the JSON roadmap according to your exact structure, without changing any keys or data types. \n\nLet's try again. I will focus on understanding the instructions and delivering the JSON output correctly this time! \n",
        ],
      },
    ]
  )

# create a json format stored in a string, the format with which the model will generate the roadmap
JSONFORMAT = '''
        {
    "semester": 3, // this has to be a single integer only
    "course": "Computer Organization", // THis has to be a single string only
    "duration": "3 weeks", // THis has to be a single string only
    "study_time_per_day": "1.5 hours", // THis has to be a single string only

    "roadmap":[ // this is the main part. Pay close attention here, I dont want any misplaced data type
        // inside the roadmap array we will have n weeks, where n corresponds to the time that the user has to prepare for, given in "duration"
        {
            "week": 1, // this has to be a single integer only
            "work": {
                "names":["topic1","topic2","topic3"], // a list of strings, covering the topics that the user has to cover in this week
                "desctiption": "Description of the topic and a general approach", // only a string
                "todo":[ // this is a list of tasks that the user has to do in this week, make sure that the tasks are string only, i dont want you changing it into anything else
                    "task 1",
                    "task 2",
                    "task 3"
                ]
            }
        },
        {
            "week": 2, // this has to be a single integer only
            "work": {
                "names": ["topic1","topic2","topic3"], // a list of strings, covering the topics that the user has to cover in this week
                "desctiption": "Description of the topic and a general approach", // only a string
                "todo":[ // this is a list of tasks that the user has to do in this week, make sure that the tasks are string only, i dont want you changing it into anything else
                    "task 1",
                    "task 2",
                    "task 3"
                ]
            }
        },
        {
            "week": 3, // this has to be a single integer only
            "work": {
                "names": ["topic1","topic2","topic3"], // a list of strings, covering the topics that the user has to cover in this week
                "desctiption": "Description of the topic and a general approach", // only a string
                "todo":[ // this is a list of tasks that the user has to do in this week, make sure that the tasks are string only, i dont want you changing it into anything else
                    "task 1",
                    "task 2",
                    "task 3"
                ]
            }
        }
    ]
}
'''

QUESTIONANSWERFORMAT = '''
        {
    "semester": 3, // this has to be a single integer only
    "course": "Computer Organization", // THis has to be a single string only
          "questions": [
            {
              "question": "question 1",
              "options": ["option 1", "option 2", "option 3", "option 4"],
              "answer": "answer 1" // this contains 1 , 2, 3 or 4. THe number of the correct answer
            },
            {
              "question": "question 2",
              "options": ["option 1", "option 2", "option 3", "option 4"],
              "answer": "answer 2" // this contains 1 , 2, 3 or 4. THe number of the correct answer
            },
            {
              "question": "question 3",
              "options": ["option 1", "option 2", "option 3", "option 4"],
              "answer": "answer 3" // this contains 1 , 2, 3 or 4. THe number of the correct answer
            },
            {
              "question": "question 4",
              "options": ["option 1", "option 2", "option 3", "option 4"],
              "answer": "answer 4" // this contains 1 , 2, 3 or 4. THe number of the correct answer
            },
            {
              "question": "question 5",
              "options": ["option 1", "option 2", "option 3", "option 4"],
              "answer": "answer 5" // this contains 1 , 2, 3 or 4. THe number of the correct answer
            }
          ]
        }
'''

def generateRoadmap(timeAvailable:int, unit:str, subject:str, semester:int, studytimeDaily:float , jsonFormat:str):
    prompt = f'Generate a JSON roadmap for Semester {semester} for {subject} with {timeAvailable} {unit} of time available, studying for {studytimeDaily} per day. Stick to this format of json data {jsonFormat} and ** do not change any keys. Only put in the values that you find. Any change in keys is undesirable **'
    result = model.generate_content(prompt)
    return result.text

def makeJSON(text):
    try:
        text = text.split('```json')[1].split('```')[0].strip()
        return json.loads(text)
    except:
        return 'Could not process the generated roadmap'

def generateQuestion(subject:str, semester:int, subtopics:str, format:str):
    #convert the list to a string to be used in the prompt
    # subtopics_str = ', '.join(subtopics)
    prompt = f'Generate a set of 5 questions for Semester {semester} {subject} only on the subtopics {subtopics} in the format {format}. Please stick to the format and change only values and not the keys.'
    result = model.generate_content(prompt)
    return result.text

def moderate_json_content(text):
    try:
        text = text.split('```json')[1].split('```')[0].strip()
        return json.loads(text)
    except:
        return 'Could not process the generated questions'